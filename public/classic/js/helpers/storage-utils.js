// js/helpers/storage-utils.js
// ======================================================
// H√†m gi√∫p l√†m vi·ªác v·ªõi localStorage
// localStorage = kho l∆∞u tr·ªØ tr√™n tr√¨nh duy·ªát c·ªßa b·∫°n
// D·ªØ li·ªáu s·∫Ω c√≤n ngay c·∫£ khi t·∫Øt tr√¨nh duy·ªát!
// ======================================================

// ‚úÖ M·ª•c ti√™u: L∆∞u d·ªØ li·ªáu v√†o localStorage
// V√≠ d·ª•: saveToStorage('playerName', 'KHOI')
// Try it: 
// saveToStorage('myScore', 1000);
// console.log(localStorage.getItem('myScore')); // "1000"
export function saveToStorage(key, value) {
    try {
        // localStorage ch·ªâ l∆∞u ƒë∆∞·ª£c text (string)
        // N√™n ch√∫ng ta chuy·ªÉn s·ªë th√†nh text tr∆∞·ªõc
        localStorage.setItem(key, String(value));
        return true;
    } catch (error) {
        console.error('L·ªói khi l∆∞u v√†o localStorage:', error);
        return false;
    }
}

// ‚úÖ M·ª•c ti√™u: L·∫•y d·ªØ li·ªáu t·ª´ localStorage
// Tr·∫£ v·ªÅ gi√° tr·ªã ƒë√£ l∆∞u, ho·∫∑c gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu ch∆∞a c√≥
// V√≠ d·ª•: getFromStorage('playerName', 'Guest')
// Try it: console.log(getFromStorage('playerName', 'NoName'));
export function getFromStorage(key, defaultValue = null) {
    try {
        const value = localStorage.getItem(key);
        // N·∫øu ch∆∞a c√≥ gi√° tr·ªã, tr·∫£ v·ªÅ gi√° tr·ªã m·∫∑c ƒë·ªãnh
        return value !== null ? value : defaultValue;
    } catch (error) {
        console.error('L·ªói khi ƒë·ªçc t·ª´ localStorage:', error);
        return defaultValue;
    }
}

// ‚úÖ M·ª•c ti√™u: X√≥a 1 m·ª•c kh·ªèi localStorage
// V√≠ d·ª•: removeFromStorage('oldScore')
// Try it: 
// removeFromStorage('playerName');
// console.log(getFromStorage('playerName')); // null
export function removeFromStorage(key) {
    try {
        localStorage.removeItem(key);
        return true;
    } catch (error) {
        console.error('L·ªói khi x√≥a t·ª´ localStorage:', error);
        return false;
    }
}

// ‚úÖ M·ª•c ti√™u: X√≥a T·∫§T C·∫¢ d·ªØ li·ªáu trong localStorage
// ‚ùóÔ∏è C·∫©n th·∫≠n: S·∫Ω m·∫•t h·∫øt t√™n, ƒëi·ªÉm, c√†i ƒë·∫∑t!
// Try it: clearAllStorage(); // M·ªçi th·ª© b·ªã x√≥a s·∫°ch
export function clearAllStorage() {
    try {
        localStorage.clear();
        console.log('‚úÖ ƒê√£ x√≥a s·∫°ch localStorage');
        return true;
    } catch (error) {
        console.error('L·ªói khi x√≥a localStorage:', error);
        return false;
    }
}

// ‚úÖ M·ª•c ti√™u: Ki·ªÉm tra localStorage c√≥ s·∫µn kh√¥ng
// M·ªôt s·ªë tr√¨nh duy·ªát c≈© ho·∫∑c ch·∫ø ƒë·ªô ri√™ng t∆∞ c√≥ th·ªÉ kh√¥ng cho d√πng
// Try it: console.log(isStorageAvailable()); // true ho·∫∑c false
export function isStorageAvailable() {
    try {
        const test = '__test__';
        localStorage.setItem(test, test);
        localStorage.removeItem(test);
        return true;
    } catch (error) {
        console.warn('localStorage kh√¥ng kh·∫£ d·ª•ng:', error);
        return false;
    }
}

// ‚ùì C√¢u h·ªèi: T·∫°i sao d√πng localStorage thay v√¨ bi·∫øn th∆∞·ªùng?
// üí° Tr·∫£ l·ªùi: Bi·∫øn th∆∞·ªùng b·ªã m·∫•t khi t·∫Øt trang web.
//            localStorage gi·ªØ d·ªØ li·ªáu m√£i m√£i (tr·ª´ khi x√≥a)!

// ‚ùì C√¢u h·ªèi: localStorage l∆∞u ·ªü ƒë√¢u?
// üí° Tr·∫£ l·ªùi: Tr√™n m√°y t√≠nh c·ªßa b·∫°n, trong th∆∞ m·ª•c c·ªßa tr√¨nh duy·ªát.
//            M·ªói trang web c√≥ localStorage ri√™ng, kh√¥ng l·∫´n l·ªôn!
