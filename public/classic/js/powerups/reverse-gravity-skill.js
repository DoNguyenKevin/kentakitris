/**
 * REVERSE GRAVITY SKILL - K·ªπ nƒÉng ƒê·∫£o Tr·ªçng L·ª±c üî∫
 * 
 * M√¥ t·∫£: Trong th·ªùi gian skill ho·∫°t ƒë·ªông, c√°c m·∫£nh gh√©p s·∫Ω bay l√™n tr√™n thay v√¨ r∆°i xu·ªëng
 * 
 * C√°ch ho·∫°t ƒë·ªông:
 * 1. Khi skill ƒë∆∞·ª£c k√≠ch ho·∫°t, h∆∞·ªõng di chuy·ªÉn t·ª± ƒë·ªông ƒë·ªïi t·ª´ xu·ªëng (dy=+1) th√†nh l√™n (dy=-1)
 * 2. Va ch·∫°m ƒë∆∞·ª£c ki·ªÉm tra ·ªü tr·∫ßn (top) thay v√¨ s√†n (bottom)
 * 3. M·∫£nh s·∫Ω ƒë∆∞·ª£c "kh√≥a" ·ªü tr·∫ßn khi va ch·∫°m
 * 4. Sau khi h·∫øt th·ªùi gian, tr·ªçng l·ª±c tr·ªü v·ªÅ b√¨nh th∆∞·ªùng
 */

/**
 * Tr·∫°ng th√°i c·ªßa Reverse Gravity
 */
let reverseGravityActive = false;

/**
 * K√≠ch ho·∫°t Reverse Gravity
 */
export function activateReverseGravity() {
    reverseGravityActive = true;
    console.log('üî∫ Reverse Gravity activated!');
}

/**
 * T·∫Øt Reverse Gravity
 */
export function deactivateReverseGravity() {
    reverseGravityActive = false;
    console.log('üî∫ Reverse Gravity deactivated!');
}

/**
 * Ki·ªÉm tra xem Reverse Gravity c√≥ ƒëang ho·∫°t ƒë·ªông kh√¥ng
 * 
 * @returns {boolean} true n·∫øu ƒëang ho·∫°t ƒë·ªông
 */
export function isReverseGravityActive() {
    return reverseGravityActive;
}

/**
 * L·∫•y h∆∞·ªõng di chuy·ªÉn d·ª±a tr√™n tr·∫°ng th√°i Reverse Gravity
 * 
 * @returns {number} -1 n·∫øu ƒëi l√™n (reverse), +1 n·∫øu ƒëi xu·ªëng (b√¨nh th∆∞·ªùng)
 */
export function getGravityDirection() {
    return reverseGravityActive ? -1 : 1;
}

/**
 * Di chuy·ªÉn m·∫£nh theo h∆∞·ªõng tr·ªçng l·ª±c hi·ªán t·∫°i
 * 
 * @param {Object} currentPiece - M·∫£nh gh√©p hi·ªán t·∫°i
 * @param {Function} movePiece - H√†m di chuy·ªÉn m·∫£nh g·ªëc
 * @returns {boolean} true n·∫øu di chuy·ªÉn th√†nh c√¥ng
 */
export function moveWithGravity(currentPiece, movePiece) {
    if (!currentPiece) return false;
    
    const direction = getGravityDirection();
    return movePiece(0, direction);
}

/**
 * ƒêi·ªÅu ch·ªânh v·ªã tr√≠ spawn c·ªßa m·∫£nh m·ªõi d·ª±a tr√™n Reverse Gravity
 * 
 * @param {Object} piece - M·∫£nh gh√©p m·ªõi
 * @param {number} BOARD_WIDTH - Chi·ªÅu r·ªông b·∫£ng
 * @param {number} BOARD_HEIGHT - Chi·ªÅu cao b·∫£ng
 * @returns {Object} M·∫£nh v·ªõi v·ªã tr√≠ ƒë√£ ƒëi·ªÅu ch·ªânh
 */
export function adjustSpawnPosition(piece, BOARD_WIDTH, BOARD_HEIGHT) {
    if (!reverseGravityActive) {
        // V·ªã tr√≠ spawn b√¨nh th∆∞·ªùng (·ªü tr√™n)
        return {
            ...piece,
            x: Math.floor((BOARD_WIDTH - piece.shape[0].length) / 2),
            y: 0
        };
    } else {
        // V·ªã tr√≠ spawn khi reverse gravity (·ªü d∆∞·ªõi)
        return {
            ...piece,
            x: Math.floor((BOARD_WIDTH - piece.shape[0].length) / 2),
            y: BOARD_HEIGHT - piece.shape.length
        };
    }
}

/**
 * Hard drop ƒë∆∞·ª£c ƒëi·ªÅu ch·ªânh cho Reverse Gravity
 * 
 * @param {Object} currentPiece - M·∫£nh gh√©p hi·ªán t·∫°i
 * @param {Function} movePiece - H√†m di chuy·ªÉn m·∫£nh
 * @returns {number} S·ªë √¥ ƒë√£ di chuy·ªÉn
 */
export function hardDropWithGravity(currentPiece, movePiece) {
    if (!currentPiece) return 0;
    
    const direction = getGravityDirection();
    let drops = 0;
    
    // Di chuy·ªÉn theo h∆∞·ªõng tr·ªçng l·ª±c cho ƒë·∫øn khi va ch·∫°m
    while (movePiece(0, direction)) {
        drops++;
    }
    
    return drops;
}

/**
 * Ki·ªÉm tra va ch·∫°m ƒë·∫∑c bi·ªát cho Reverse Gravity
 * H√†m n√†y m·ªü r·ªông logic ki·ªÉm tra va ch·∫°m cho tr∆∞·ªùng h·ª£p ƒë·∫£o tr·ªçng l·ª±c
 * 
 * @param {Object} piece - M·∫£nh c·∫ßn ki·ªÉm tra
 * @param {Array} board - B·∫£ng game
 * @param {number} BOARD_WIDTH - Chi·ªÅu r·ªông b·∫£ng
 * @param {number} BOARD_HEIGHT - Chi·ªÅu cao b·∫£ng
 * @returns {boolean} true n·∫øu c√≥ va ch·∫°m
 */
export function checkReverseGravityCollision(piece, board, BOARD_WIDTH, BOARD_HEIGHT) {
    for (let r = 0; r < piece.shape.length; r++) {
        for (let c = 0; c < piece.shape[r].length; c++) {
            if (piece.shape[r][c]) {
                const boardX = piece.x + c;
                const boardY = piece.y + r;

                // Ki·ªÉm tra bi√™n
                if (boardX < 0 || boardX >= BOARD_WIDTH) {
                    return true;
                }
                
                if (reverseGravityActive) {
                    // Khi reverse, ki·ªÉm tra tr·∫ßn (y < 0) thay v√¨ s√†n
                    if (boardY < 0 || boardY >= BOARD_HEIGHT) {
                        return true;
                    }
                } else {
                    // B√¨nh th∆∞·ªùng, ki·ªÉm tra s√†n
                    if (boardY >= BOARD_HEIGHT) {
                        return true;
                    }
                }
                
                // Ki·ªÉm tra va ch·∫°m v·ªõi c√°c √¥ ƒë√£ c√≥
                if (boardY >= 0 && boardY < BOARD_HEIGHT && board[boardY][boardX] !== 0) {
                    return true;
                }
            }
        }
    }
    return false;
}
