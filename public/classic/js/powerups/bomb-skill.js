/**
 * BOMB SKILL - K·ªπ nƒÉng Bom üí£
 * 
 * M√¥ t·∫£: Khi m·∫£nh gh√©p ƒë∆∞·ª£c ƒë·∫∑t xu·ªëng, n√≥ s·∫Ω t·∫°o ra v·ª• n·ªï 3x3 x√≥a t·∫•t c·∫£ c√°c √¥ xung quanh
 * 
 * C√°ch ho·∫°t ƒë·ªông:
 * 1. Khi ng∆∞·ªùi ch∆°i ch·ªçn skill Bomb, m·∫£nh ti·∫øp theo s·∫Ω c√≥ hi·ªáu ·ª©ng Bomb
 * 2. Khi m·∫£nh ƒë√≥ ƒë∆∞·ª£c ƒë·∫∑t xu·ªëng (lock), n√≥ s·∫Ω k√≠ch ho·∫°t v·ª• n·ªï
 * 3. V·ª• n·ªï x√≥a t·∫•t c·∫£ c√°c √¥ trong v√πng 3x3 xung quanh v·ªã tr√≠ m·∫£nh gh√©p
 */

/**
 * K√≠ch ho·∫°t hi·ªáu ·ª©ng bom t·∫°i v·ªã tr√≠ m·∫£nh gh√©p v·ª´a ƒë∆∞·ª£c ƒë·∫∑t xu·ªëng
 * 
 * @param {Array} board - B·∫£ng game (m·∫£ng 2 chi·ªÅu)
 * @param {Object} piece - M·∫£nh gh√©p v·ª´a ƒë∆∞·ª£c ƒë·∫∑t
 * @param {number} piece.x - V·ªã tr√≠ X (c·ªôt) c·ªßa m·∫£nh
 * @param {number} piece.y - V·ªã tr√≠ Y (h√†ng) c·ªßa m·∫£nh
 * @param {Array} piece.shape - H√¨nh d·∫°ng c·ªßa m·∫£nh (m·∫£ng 2 chi·ªÅu)
 * @param {number} BOARD_WIDTH - Chi·ªÅu r·ªông c·ªßa b·∫£ng
 * @param {number} BOARD_HEIGHT - Chi·ªÅu cao c·ªßa b·∫£ng
 */
export function activateBombEffect(board, piece, BOARD_WIDTH, BOARD_HEIGHT) {
    // T√¨m t√¢m c·ªßa m·∫£nh gh√©p (trung t√¢m c·ªßa v·ª• n·ªï)
    let centerX = 0;
    let centerY = 0;
    let blockCount = 0;
    
    // T√≠nh trung b√¨nh v·ªã tr√≠ c·ªßa t·∫•t c·∫£ c√°c √¥ trong m·∫£nh ƒë·ªÉ t√¨m t√¢m
    piece.shape.forEach((row, r) => {
        row.forEach((cell, c) => {
            if (cell) {
                centerX += piece.x + c;
                centerY += piece.y + r;
                blockCount++;
            }
        });
    });
    
    // Chia trung b√¨nh ƒë·ªÉ c√≥ t·ªça ƒë·ªô t√¢m
    centerX = Math.floor(centerX / blockCount);
    centerY = Math.floor(centerY / blockCount);
    
    // T·∫°o v·ª• n·ªï 3x3 xung quanh t√¢m
    // Duy·ªát qua 9 √¥ (3x3) xung quanh t√¢m
    for (let dy = -1; dy <= 1; dy++) {
        for (let dx = -1; dx <= 1; dx++) {
            const explodeX = centerX + dx;
            const explodeY = centerY + dy;
            
            // Ki·ªÉm tra xem √¥ c√≥ n·∫±m trong b·∫£ng kh√¥ng
            if (explodeX >= 0 && explodeX < BOARD_WIDTH && 
                explodeY >= 0 && explodeY < BOARD_HEIGHT) {
                // X√≥a √¥ (ƒë·∫∑t v·ªÅ 0 = √¥ tr·ªëng)
                board[explodeY][explodeX] = 0;
            }
        }
    }
    
    return true; // Tr·∫£ v·ªÅ true ƒë·ªÉ b√°o hi·ªáu ƒë√£ k√≠ch ho·∫°t th√†nh c√¥ng
}

/**
 * Ki·ªÉm tra xem c√≥ ƒëang c√≥ hi·ªáu ·ª©ng bom ch·ªù k√≠ch ho·∫°t kh√¥ng
 * 
 * @param {Array} activePowerups - Danh s√°ch c√°c skill ƒëang ho·∫°t ƒë·ªông
 * @returns {boolean} true n·∫øu c√≥ bomb ch·ªù k√≠ch ho·∫°t
 */
export function hasBombPending(activePowerups) {
    return activePowerups.some(p => p.id === 'BOMB' && p.uses > 0);
}

/**
 * Gi·∫£m s·ªë l·∫ßn s·ª≠ d·ª•ng c·ªßa bomb sau khi ƒë√£ k√≠ch ho·∫°t
 * 
 * @param {Array} activePowerups - Danh s√°ch c√°c skill ƒëang ho·∫°t ƒë·ªông
 * @returns {Array} Danh s√°ch ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
 */
export function consumeBombUse(activePowerups) {
    return activePowerups.map(p => {
        if (p.id === 'BOMB' && p.uses > 0) {
            return { ...p, uses: p.uses - 1 };
        }
        return p;
    }).filter(p => p.id !== 'BOMB' || p.uses > 0); // X√≥a bomb n·∫øu h·∫øt l∆∞·ª£t
}
