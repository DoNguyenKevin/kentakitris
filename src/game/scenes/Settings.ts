// src/game/scenes/Settings.ts
// ======================================================
// ‚úÖ Settings Scene - M√†n h√¨nh c√†i ƒë·∫∑t game
// 
// Scene n√†y cho ph√©p ng∆∞·ªùi ch∆°i t√πy ch·ªânh:
// - B·∫≠t/t·∫Øt hi·ªÉn th·ªã t·ªëc ƒë·ªô r∆°i (Speed Indicator)
// - B·∫≠t/t·∫Øt √¢m thanh (Sound Effects)
// - B·∫≠t/t·∫Øt nh·∫°c n·ªÅn (Background Music)
// - ƒêi·ªÅu ch·ªânh √¢m l∆∞·ª£ng
// 
// ƒê∆∞·ª£c m·ªü t·ª´ MainMenu ho·∫∑c khi game ƒëang pause
// ======================================================

import { Scene } from 'phaser';
import { EventBus } from '../EventBus';

/**
 * ‚úÖ Settings Scene - M√†n h√¨nh c√†i ƒë·∫∑t
 * 
 * Cho ph√©p ng∆∞·ªùi ch∆°i ƒëi·ªÅu ch·ªânh c√°c t√πy ch·ªçn game
 * L∆∞u settings v√†o localStorage ƒë·ªÉ gi·ªØ l·∫°i khi t·∫Øt game
 */
export class Settings extends Scene {
    // üìù UI Elements
    private background: Phaser.GameObjects.Graphics;
    private settingsText: Phaser.GameObjects.Text;
    private closeButton: Phaser.GameObjects.Text;
    
    // ‚öôÔ∏è Settings toggles
    private showSpeedToggle: Phaser.GameObjects.Text;
    private soundToggle: Phaser.GameObjects.Text;
    private musicToggle: Phaser.GameObjects.Text;
    
    // üìä Settings state
    private settings: {
        showSpeed: boolean;
        soundEnabled: boolean;
        musicEnabled: boolean;
        soundVolume: number;
        musicVolume: number;
    };
    
    // üîô Previous scene (ƒë·ªÉ bi·∫øt quay l·∫°i scene n√†o)
    private previousScene: string;

    constructor() {
        super('Settings');
    }

    /**
     * ‚úÖ init() - Kh·ªüi t·∫°o v·ªõi data t·ª´ scene tr∆∞·ªõc
     * 
     * @param data - Ch·ª©a previousScene ƒë·ªÉ bi·∫øt quay l·∫°i ƒë√¢u
     */
    init(data: any) {
        this.previousScene = data.previousScene || 'MainMenu';
        
        // üì• Load settings t·ª´ localStorage
        this.loadSettings();
    }

    /**
     * ‚úÖ create() - T·∫°o UI cho Settings scene
     * 
     * T·∫°o:
     * 1. Background t·ªëi (overlay)
     * 2. Settings box v·ªõi border
     * 3. C√°c toggle buttons (Show Speed, Sound, Music)
     * 4. Close button
     */
    create() {
        const width = this.cameras.main.width;
        const height = this.cameras.main.height;

        // üé® T·∫°o background overlay (t·ªëi m·ªù)
        this.background = this.add.graphics();
        this.background.fillStyle(0x000000, 0.8);
        this.background.fillRect(0, 0, width, height);

        // üì¶ Settings box
        const boxX = width / 2;
        const boxY = height / 2;
        const boxWidth = 500;
        const boxHeight = 400;
        
        // V·∫Ω box v·ªõi border
        const settingsBox = this.add.graphics();
        settingsBox.fillStyle(0x2c314c, 1);
        settingsBox.fillRect(boxX - boxWidth / 2, boxY - boxHeight / 2, boxWidth, boxHeight);
        settingsBox.lineStyle(4, 0xf9f9f9, 1);
        settingsBox.strokeRect(boxX - boxWidth / 2, boxY - boxHeight / 2, boxWidth, boxHeight);

        // üèÜ Ti√™u ƒë·ªÅ "SETTINGS"
        this.settingsText = this.add.text(boxX, boxY - boxHeight / 2 + 40, '‚öôÔ∏è SETTINGS', {
            fontFamily: 'Arial Black',
            fontSize: '32px',
            color: '#FFD700',
        }).setOrigin(0.5);

        // üìä Settings options (Y positions)
        const startY = boxY - boxHeight / 2 + 120;
        const spacing = 80;

        // 1Ô∏è‚É£ Show Speed Toggle
        this.createToggle(
            'üìä Show Speed',
            'Display drop speed (ms) beside level',
            boxX,
            startY,
            this.settings.showSpeed,
            () => this.toggleShowSpeed()
        );

        // 2Ô∏è‚É£ Sound Effects Toggle
        this.createToggle(
            'üîä Sound Effects',
            'Enable sound effects (move, rotate, clear)',
            boxX,
            startY + spacing,
            this.settings.soundEnabled,
            () => this.toggleSound()
        );

        // 3Ô∏è‚É£ Background Music Toggle
        this.createToggle(
            'üéµ Background Music',
            'Enable background music',
            boxX,
            startY + spacing * 2,
            this.settings.musicEnabled,
            () => this.toggleMusic()
        );

        // üîô Close button
        this.closeButton = this.add.text(boxX, boxY + boxHeight / 2 - 40, 'CLOSE', {
            fontFamily: 'Arial Black',
            fontSize: '24px',
            color: '#FFFFFF',
            backgroundColor: '#3b82f6',
            padding: { x: 40, y: 15 },
        }).setOrigin(0.5).setInteractive({ useHandCursor: true });

        this.closeButton.on('pointerdown', () => this.closeSettings());
        this.closeButton.on('pointerover', () => {
            this.closeButton.setBackgroundColor('#60a5fa');
        });
        this.closeButton.on('pointerout', () => {
            this.closeButton.setBackgroundColor('#3b82f6');
        });

        // ‚å®Ô∏è ESC ƒë·ªÉ ƒë√≥ng
        this.input.keyboard!.on('keydown-ESC', () => this.closeSettings());

        // üì° Th√¥ng b√°o scene ready
        EventBus.emit('current-scene-ready', this);
    }

    /**
     * ‚úÖ createToggle() - T·∫°o m·ªôt toggle button
     * 
     * @param label - Nh√£n ch√≠nh (vd: "Show Speed")
     * @param description - M√¥ t·∫£ (vd: "Display drop speed...")
     * @param x - V·ªã tr√≠ X
     * @param y - V·ªã tr√≠ Y
     * @param isOn - Tr·∫°ng th√°i hi·ªán t·∫°i (true/false)
     * @param callback - H√†m g·ªçi khi click
     */
    private createToggle(
        label: string,
        description: string,
        x: number,
        y: number,
        isOn: boolean,
        callback: () => void
    ) {
        // üìù Label text (b√™n tr√°i)
        const labelText = this.add.text(x - 180, y - 15, label, {
            fontFamily: 'Arial',
            fontSize: '18px',
            color: '#FFFFFF',
            fontStyle: 'bold',
        });

        // üìù Description text (b√™n tr√°i, d∆∞·ªõi label)
        this.add.text(x - 180, y + 10, description, {
            fontFamily: 'Arial',
            fontSize: '12px',
            color: '#888888',
        });

        // üîò Toggle switch (b√™n ph·∫£i)
        const toggleBox = this.add.graphics();
        const toggleX = x + 150;
        const toggleWidth = 60;
        const toggleHeight = 30;
        
        // Background
        toggleBox.fillStyle(isOn ? 0x10b981 : 0x6b7280, 1);
        toggleBox.fillRoundedRect(toggleX, y - 5, toggleWidth, toggleHeight, 15);
        
        // Circle
        const circleX = isOn ? toggleX + toggleWidth - 15 : toggleX + 15;
        const circleY = y + 10;
        const circle = this.add.circle(circleX, circleY, 12, 0xffffff);
        
        // üñ±Ô∏è Make interactive
        const hitArea = this.add.rectangle(toggleX, y + 10, toggleWidth, toggleHeight, 0x000000, 0)
            .setInteractive({ useHandCursor: true });
        
        hitArea.on('pointerdown', () => {
            callback();
            
            // Animate toggle
            const newState = !isOn;
            toggleBox.clear();
            toggleBox.fillStyle(newState ? 0x10b981 : 0x6b7280, 1);
            toggleBox.fillRoundedRect(toggleX, y - 5, toggleWidth, toggleHeight, 15);
            
            // Animate circle
            const newCircleX = newState ? toggleX + toggleWidth - 15 : toggleX + 15;
            this.tweens.add({
                targets: circle,
                x: newCircleX,
                duration: 200,
                ease: 'Power2',
            });
            
            // Update state
            isOn = newState;
        });
    }

    /**
     * ‚úÖ Toggle functions - B·∫≠t/t·∫Øt t·ª´ng setting
     */
    private toggleShowSpeed() {
        this.settings.showSpeed = !this.settings.showSpeed;
        this.saveSettings();
        EventBus.emit('settings-changed', this.settings);
    }

    private toggleSound() {
        this.settings.soundEnabled = !this.settings.soundEnabled;
        this.saveSettings();
        EventBus.emit('settings-changed', this.settings);
    }

    private toggleMusic() {
        this.settings.musicEnabled = !this.settings.musicEnabled;
        this.saveSettings();
        EventBus.emit('settings-changed', this.settings);
    }

    /**
     * ‚úÖ loadSettings() - Load settings t·ª´ localStorage
     * 
     * N·∫øu ch∆∞a c√≥ settings ‚Üí d√πng default values
     */
    private loadSettings() {
        const savedSettings = localStorage.getItem('gameSettings');
        
        if (savedSettings) {
            this.settings = JSON.parse(savedSettings);
        } else {
            // üéØ Default settings
            this.settings = {
                showSpeed: false,
                soundEnabled: true,
                musicEnabled: true,
                soundVolume: 0.7,
                musicVolume: 0.5,
            };
        }
    }

    /**
     * ‚úÖ saveSettings() - L∆∞u settings v√†o localStorage
     */
    private saveSettings() {
        localStorage.setItem('gameSettings', JSON.stringify(this.settings));
    }

    /**
     * ‚úÖ closeSettings() - ƒê√≥ng Settings v√† quay l·∫°i scene tr∆∞·ªõc
     */
    private closeSettings() {
        this.scene.stop('Settings');
        this.scene.resume(this.previousScene);
    }

    /**
     * ‚úÖ getSettings() - L·∫•y settings hi·ªán t·∫°i (static method)
     * 
     * D√πng ƒë·ªÉ c√°c scene kh√°c truy c·∫≠p settings
     */
    static getSettings() {
        const savedSettings = localStorage.getItem('gameSettings');
        
        if (savedSettings) {
            return JSON.parse(savedSettings);
        } else {
            return {
                showSpeed: false,
                soundEnabled: true,
                musicEnabled: true,
                soundVolume: 0.7,
                musicVolume: 0.5,
            };
        }
    }
}
