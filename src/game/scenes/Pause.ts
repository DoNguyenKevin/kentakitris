// src/game/scenes/Pause.ts
// ======================================================
// ‚úÖ Pause Scene - M√†n h√¨nh t·∫°m d·ª´ng game
// 
// Scene n√†y hi·ªÉn th·ªã khi game b·ªã pause:
// - Overlay t·ªëi (ƒë·ªÉ th·∫•y game ph√≠a sau)
// - Text "PAUSED"
// - Button: Resume, Settings, Quit
// 
// ƒê∆∞·ª£c m·ªü b·∫±ng ph√≠m P ho·∫∑c ESC trong Game scene
// ======================================================

import { Scene } from 'phaser';
import { EventBus } from '../EventBus';

/**
 * ‚úÖ Pause Scene - Overlay khi game t·∫°m d·ª´ng
 * 
 * Scene n√†y kh√¥ng d·ª´ng Game scene, ch·ªâ hi·ªÉn th·ªã overlay tr√™n ƒë√≥
 * Game scene v·∫´n ch·∫°y ·ªü ph√≠a sau nh∆∞ng ƒë∆∞·ª£c pause
 */
export class Pause extends Scene {
    private background: Phaser.GameObjects.Graphics;
    private pausedText: Phaser.GameObjects.Text;
    private resumeButton: Phaser.GameObjects.Text;
    private settingsButton: Phaser.GameObjects.Text;
    private quitButton: Phaser.GameObjects.Text;

    constructor() {
        super('Pause');
    }

    /**
     * ‚úÖ create() - T·∫°o pause overlay
     * 
     * C√°c b∆∞·ªõc:
     * 1. T·∫°o background t·ªëi m·ªù (50% opacity)
     * 2. Hi·ªÉn th·ªã "PAUSED" to ƒë√πng
     * 3. T·∫°o 3 n√∫t: Resume, Settings, Quit
     * 4. Thi·∫øt l·∫≠p keyboard input (P/ESC ƒë·ªÉ resume)
     */
    create() {
        const width = this.cameras.main.width;
        const height = this.cameras.main.height;

        // üé® T·∫°o background overlay (t·ªëi m·ªù 50%)
        this.background = this.add.graphics();
        this.background.fillStyle(0x000000, 0.7);
        this.background.fillRect(0, 0, width, height);

        // üèÜ Text "PAUSED" l·ªõn ·ªü gi·ªØa
        this.pausedText = this.add.text(width / 2, height / 2 - 100, 'PAUSED', {
            fontFamily: 'Arial Black',
            fontSize: '64px',
            color: '#FFD700',
            stroke: '#000000',
            strokeThickness: 8,
        }).setOrigin(0.5);

        // Hi·ªáu ·ª©ng nh·∫•p nh√°y
        this.tweens.add({
            targets: this.pausedText,
            alpha: 0.5,
            duration: 800,
            yoyo: true,
            repeat: -1,
            ease: 'Sine.easeInOut',
        });

        // üîò Resume button
        this.resumeButton = this.createButton(
            width / 2,
            height / 2,
            'RESUME',
            '#10b981',
            () => this.resumeGame()
        );

        // ‚öôÔ∏è Settings button
        this.settingsButton = this.createButton(
            width / 2,
            height / 2 + 70,
            'SETTINGS',
            '#3b82f6',
            () => this.openSettings()
        );

        // üö™ Quit button
        this.quitButton = this.createButton(
            width / 2,
            height / 2 + 140,
            'QUIT TO MENU',
            '#ef4444',
            () => this.quitToMenu()
        );

        // ‚å®Ô∏è Keyboard shortcuts
        this.input.keyboard!.on('keydown-P', () => this.resumeGame());
        this.input.keyboard!.on('keydown-ESC', () => this.resumeGame());
        this.input.keyboard!.on('keydown-SPACE', () => this.resumeGame());

        // üìù Hint text ·ªü d∆∞·ªõi
        this.add.text(width / 2, height - 50, 'Press P, ESC, or SPACE to resume', {
            fontFamily: 'Arial',
            fontSize: '16px',
            color: '#888888',
        }).setOrigin(0.5);

        // üì° Th√¥ng b√°o scene ready
        EventBus.emit('current-scene-ready', this);
    }

    /**
     * ‚úÖ createButton() - Helper t·∫°o button
     * 
     * T·∫°o button v·ªõi:
     * - Text c√≥ m√†u background
     * - Hover effect (ƒë·ªïi m√†u khi r√™ chu·ªôt)
     * - Click callback
     * 
     * @param x - V·ªã tr√≠ X
     * @param y - V·ªã tr√≠ Y
     * @param text - Ch·ªØ tr√™n button
     * @param color - M√†u button (hex)
     * @param callback - H√†m g·ªçi khi click
     */
    private createButton(
        x: number,
        y: number,
        text: string,
        color: string,
        callback: () => void
    ): Phaser.GameObjects.Text {
        const button = this.add.text(x, y, text, {
            fontFamily: 'Arial Black',
            fontSize: '24px',
            color: '#FFFFFF',
            backgroundColor: color,
            padding: { x: 30, y: 15 },
        }).setOrigin(0.5).setInteractive({ useHandCursor: true });

        // üñ±Ô∏è Hover effects
        button.on('pointerover', () => {
            button.setScale(1.1);
            // Lighten color on hover
            const hoverColors: { [key: string]: string } = {
                '#10b981': '#34d399',
                '#3b82f6': '#60a5fa',
                '#ef4444': '#f87171',
            };
            button.setBackgroundColor(hoverColors[color] || color);
        });

        button.on('pointerout', () => {
            button.setScale(1);
            button.setBackgroundColor(color);
        });

        // üñ±Ô∏è Click
        button.on('pointerdown', () => {
            button.setScale(0.95);
        });

        button.on('pointerup', () => {
            button.setScale(1.1);
            callback();
        });

        return button;
    }

    /**
     * ‚úÖ resumeGame() - Ti·∫øp t·ª•c game
     * 
     * ƒê√≥ng Pause scene v√† resume Game scene
     */
    private resumeGame() {
        this.scene.stop('Pause');
        this.scene.resume('Game');
        EventBus.emit('game-resumed');
    }

    /**
     * ‚úÖ openSettings() - M·ªü Settings
     * 
     * Gi·ªØ Pause scene, m·ªü Settings scene
     */
    private openSettings() {
        this.scene.pause('Pause');
        this.scene.launch('Settings', { previousScene: 'Pause' });
    }

    /**
     * ‚úÖ quitToMenu() - Tho√°t v·ªÅ menu
     * 
     * D·ª´ng Game scene v√† Pause scene
     * Chuy·ªÉn v·ªÅ MainMenu
     */
    private quitToMenu() {
        this.scene.stop('Pause');
        this.scene.stop('Game');
        this.scene.start('MainMenu');
        EventBus.emit('game-quit');
    }
}
