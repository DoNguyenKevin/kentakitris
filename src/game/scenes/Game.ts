// src/game/scenes/Game.ts
// ======================================================
// ‚úÖ Scene ch√≠nh c·ªßa game Tetris - N∆°i di·ªÖn ra gameplay
// 
// Scene n√†y ch·ª©a:
// - Logic game Tetris (di chuy·ªÉn, xoay, x√≥a h√†ng)
// - V·∫Ω board v√† c√°c m·∫£nh l√™n m√†n h√¨nh
// - X·ª≠ l√Ω input t·ª´ b√†n ph√≠m
// - T√≠nh ƒëi·ªÉm, level, v√† game over
// 
// ƒê√¢y l√† "tr√°i tim" c·ªßa game!
// ======================================================

import { EventBus } from '../EventBus';
import { Scene } from 'phaser';
import { Leaderboard } from './Leaderboard';

// üéÆ H·∫±ng s·ªë game (Game Constants)
// ======================================================
// Nh·ªØng con s·ªë n√†y ƒë·ªãnh nghƒ©a k√≠ch th∆∞·ªõc v√† quy t·∫Øc c·ªßa game

// üìè K√≠ch th∆∞·ªõc board
const BOARD_WIDTH = 10;  // 10 c·ªôt (chu·∫©n Tetris g·ªëc t·ª´ 1984)
const BOARD_HEIGHT = 20; // 20 h√†ng
const BLOCK_SIZE = 30;   // M·ªói √¥ vu√¥ng = 30x30 pixels

// ‚ùì Th·ª≠ nghi·ªám: Thay BOARD_WIDTH = 15 ‚Üí Board r·ªông h∆°n!
// ‚ùì Th·ª≠ nghi·ªám: Thay BLOCK_SIZE = 40 ‚Üí √î to h∆°n!
// üé® M√†u s·∫Øc cho c√°c m·∫£nh Tetris
// ======================================================
// M·ªói lo·∫°i m·∫£nh c√≥ 1 m√†u ri√™ng (theo chu·∫©n Tetris hi·ªán ƒë·∫°i)
// ‚úÖ ƒê√£ c·∫≠p nh·∫≠t ƒë·ªÉ kh·ªõp v·ªõi theme c·ªßa game JS c≈©
const COLORS = [
    0x000000, // 0 = Tr·ªëng (Empty) - M√†u ƒëen
    0xFF0D72, // 1 = T - M√†u h·ªìng s√°ng (Bright Pink)
    0x0DC2FF, // 2 = I - M√†u xanh n∆∞·ªõc bi·ªÉn (Cyan)
    0x0DFF72, // 3 = J - M√†u xanh l√° chanh (Lime Green)
    0xFF8E0D, // 4 = L - M√†u cam (Orange)
    0xFFE100, // 5 = O - M√†u v√†ng (Yellow)
    0xFF1A0D, // 6 = S - M√†u ƒë·ªè s√°ng (Bright Red)
    0x5833FF, // 7 = Z - M√†u t√≠m xanh (Blue Violet)
];

// üí° L∆∞u √Ω: M√†u trong Phaser d√πng h·ªá 16 (hex)
//          V√≠ d·ª•: 0xFF0D72 = m√†u h·ªìng s√°ng
//          C√°c m√†u n√†y kh·ªõp v·ªõi game JS c≈© trong src/index.css

// üß© H√¨nh d·∫°ng c√°c m·∫£nh Tetris (Shapes)
// ======================================================
// 7 lo·∫°i m·∫£nh trong Tetris, m·ªói lo·∫°i c√≥ h√¨nh d·∫°ng ri√™ng
// D√πng m·∫£ng 2 chi·ªÅu ƒë·ªÉ bi·ªÉu di·ªÖn: 1 = c√≥ √¥, 0 = tr·ªëng

const SHAPES = [
    // T - H√¨nh ch·ªØ T
    [[0, 1, 0], 
     [1, 1, 1], 
     [0, 0, 0]],
    
    // I - H√¨nh thanh d√†i
    [[0, 0, 0, 0], 
     [1, 1, 1, 1], 
     [0, 0, 0, 0], 
     [0, 0, 0, 0]],
    
    // J - H√¨nh ch·ªØ J
    [[1, 0, 0], 
     [1, 1, 1], 
     [0, 0, 0]],
    
    // L - H√¨nh ch·ªØ L
    [[0, 0, 1], 
     [1, 1, 1], 
     [0, 0, 0]],
    
    // O - H√¨nh vu√¥ng
    [[1, 1], 
     [1, 1]],
    
    // S - H√¨nh ch·ªØ S
    [[0, 1, 1], 
     [1, 1, 0], 
     [0, 0, 0]],
    
    // Z - H√¨nh ch·ªØ Z
    [[1, 1, 0], 
     [0, 1, 1], 
     [0, 0, 0]],
];

// ‚ùì C√¢u h·ªèi: T·∫°i sao d√πng m·∫£ng 2 chi·ªÅu?
// üí° Tr·∫£ l·ªùi: V√¨ m·∫£nh Tetris c√≥ h√†ng v√† c·ªôt, gi·ªëng b√†n c·ªù!
//            [[1,0], [1,1]] = √¥ (0,0) c√≥ 1, √¥ (0,1) c√≥ 0...

// üéÆ C·∫•u tr√∫c d·ªØ li·ªáu c·ªßa 1 m·∫£nh Tetris (Piece)
// ======================================================
interface Piece {
    shape: number[][];  // H√¨nh d·∫°ng (m·∫£ng 2D: 1=c√≥ √¥, 0=tr·ªëng)
    color: number;      // M√†u s·∫Øc (1-7, t∆∞∆°ng ·ª©ng COLORS)
    x: number;          // V·ªã tr√≠ c·ªôt tr√™n board (0 = c·ªôt tr√°i)
    y: number;          // V·ªã tr√≠ h√†ng tr√™n board (0 = h√†ng tr√™n)
}

// V√≠ d·ª•: { shape: [[1,1],[1,1]], color: 5, x: 4, y: 0 }
// ‚Üí M·∫£nh O (vu√¥ng), m√†u v√†ng, ·ªü gi·ªØa board, h√†ng tr√™n c√πng

/**
 * ‚úÖ Game Scene - Scene ch√≠nh ch·ª©a gameplay Tetris
 * 
 * ƒê√¢y l√† class ch√≠nh c·ªßa game, k·∫ø th·ª´a t·ª´ Phaser.Scene
 * Phaser s·∫Ω t·ª± ƒë·ªông g·ªçi c√°c ph∆∞∆°ng th·ª©c: create(), update()
 * 
 * üéÆ Scene = M√†n h√¨nh trong game
 * M·ªói scene l√† 1 m√†n h√¨nh kh√°c nhau: Menu, Game, GameOver...
 */
export class Game extends Scene {
    // üìπ Camera - Qu·∫£n l√Ω khung nh√¨n c·ªßa game
    camera: Phaser.Cameras.Scene2D.Camera;
    
    // üìä D·ªØ li·ªáu game state
    board: number[][];           // B·∫£ng ch∆°i (m·∫£ng 2D: 0=tr·ªëng, 1-7=m√†u)
    currentPiece: Piece | null;  // M·∫£nh ƒëang r∆°i (null = ch∆∞a c√≥)
    nextPiece: Piece | null;     // M·∫£nh ti·∫øp theo
    score: number;               // ƒêi·ªÉm s·ªë hi·ªán t·∫°i
    lines: number;               // S·ªë h√†ng ƒë√£ x√≥a
    level: number;               // Level hi·ªán t·∫°i (1, 2, 3...)
    gameOver: boolean;           // Tr·∫°ng th√°i game (true = thua)
    
    // üé® Graphics - C√¥ng c·ª• v·∫Ω c·ªßa Phaser
    boardGraphics: Phaser.GameObjects.Graphics;      // V·∫Ω board
    pieceGraphics: Phaser.GameObjects.Graphics;      // V·∫Ω m·∫£nh hi·ªán t·∫°i
    nextPieceGraphics: Phaser.GameObjects.Graphics;  // V·∫Ω m·∫£nh ti·∫øp theo
    
    // üìù UI Text - C√°c ch·ªØ tr√™n m√†n h√¨nh
    scoreText: Phaser.GameObjects.Text;  // Hi·ªÉn th·ªã ƒëi·ªÉm
    levelText: Phaser.GameObjects.Text;  // Hi·ªÉn th·ªã level
    linesText: Phaser.GameObjects.Text;  // Hi·ªÉn th·ªã s·ªë h√†ng
    
    // üîÑ Game loop - V√≤ng l·∫∑p game
    dropTimer: Phaser.Time.TimerEvent;   // B·ªô ƒë·∫øm th·ªùi gian t·ª± ƒë·ªông r∆°i
    dropDelay: number;                   // Th·ªùi gian gi·ªØa m·ªói l·∫ßn r∆°i (ms)
    
    // ‚å®Ô∏è Input - ƒêi·ªÅu khi·ªÉn
    cursors: Phaser.Types.Input.Keyboard.CursorKeys;  // Ph√≠m m≈©i t√™n
    
    /**
     * ‚úÖ Constructor - Kh·ªüi t·∫°o scene
     * 
     * Ph∆∞∆°ng th·ª©c n√†y ch·∫°y khi t·∫°o scene l·∫ßn ƒë·∫ßu
     * Truy·ªÅn t√™n 'Game' cho Phaser ƒë·ªÉ nh·∫≠n di·ªán scene
     */
    constructor() {
        super('Game');
    }

    /**
     * ‚úÖ create() - Kh·ªüi t·∫°o game
     * 
     * Ph∆∞∆°ng th·ª©c n√†y ƒë∆∞·ª£c Phaser t·ª± ƒë·ªông g·ªçi khi scene b·∫Øt ƒë·∫ßu
     * Nhi·ªám v·ª•: Chu·∫©n b·ªã m·ªçi th·ª© tr∆∞·ªõc khi ch∆°i
     * 
     * C√°c b∆∞·ªõc:
     * 1. Thi·∫øt l·∫≠p camera v√† m√†u n·ªÅn
     * 2. Kh·ªüi t·∫°o board tr·ªëng (m·∫£ng 20x10)
     * 3. ƒê·∫∑t ƒëi·ªÉm/level/lines = 0
     * 4. T·∫°o c√°c ƒë·ªëi t∆∞·ª£ng Graphics ƒë·ªÉ v·∫Ω
     * 5. T·∫°o UI (text hi·ªÉn th·ªã ƒëi·ªÉm, level...)
     * 6. Thi·∫øt l·∫≠p ƒëi·ªÅu khi·ªÉn (keyboard)
     * 7. Spawn m·∫£nh ƒë·∫ßu ti√™n
     * 8. B·∫Øt ƒë·∫ßu game loop
     * 
     * Try it: Ch·∫°y game v√† xem create() ƒë∆∞·ª£c g·ªçi khi n√†o!
     */
    create() {
        // üìπ Thi·∫øt l·∫≠p camera
        this.camera = this.cameras.main;
        this.camera.setBackgroundColor(0x0d0d1a); // M√†u n·ªÅn t·ªëi (xanh ƒëen)

        // üìä Kh·ªüi t·∫°o board tr·ªëng
        // Array.from() t·∫°o m·∫£ng 20 h√†ng, m·ªói h√†ng c√≥ 10 s·ªë 0
        // ‚Üí Board ban ƒë·∫ßu to√†n √¥ tr·ªëng
        this.board = Array.from({ length: BOARD_HEIGHT }, () => 
            Array(BOARD_WIDTH).fill(0)
        );
        
        // üìà Kh·ªüi t·∫°o game state
        this.score = 0;        // B·∫Øt ƒë·∫ßu 0 ƒëi·ªÉm
        this.lines = 0;        // Ch∆∞a x√≥a h√†ng n√†o
        this.level = 1;        // Level 1
        this.gameOver = false; // Ch∆∞a thua
        this.dropDelay = 1000; // M·∫£nh r∆°i 1 l·∫ßn/gi√¢y (1000ms)

        // üé® T·∫°o ƒë·ªëi t∆∞·ª£ng Graphics (d√πng ƒë·ªÉ v·∫Ω)
        this.boardGraphics = this.add.graphics();
        this.pieceGraphics = this.add.graphics();
        this.nextPieceGraphics = this.add.graphics();

        // üìù T·∫°o UI (ch·ªØ v√† b·∫£ng ƒëi·ªÉm)
        this.createUI();

        // ‚å®Ô∏è Thi·∫øt l·∫≠p ƒëi·ªÅu khi·ªÉn keyboard
        this.cursors = this.input.keyboard!.createCursorKeys();
        this.input.keyboard!.on('keydown-SPACE', () => this.hardDrop());  // Ph√≠m Space = th·∫£ nhanh
        this.input.keyboard!.on('keydown-UP', () => this.rotatePiece()); // Ph√≠m ‚Üë = xoay
        this.input.keyboard!.on('keydown-X', () => this.rotatePiece());  // Ph√≠m X = xoay

        // üéÆ B·∫Øt ƒë·∫ßu game
        this.spawnPiece();      // T·∫°o m·∫£nh ƒë·∫ßu ti√™n
        this.startGameLoop();   // B·∫Øt ƒë·∫ßu v√≤ng l·∫∑p t·ª± ƒë·ªông r∆°i

        // üì° Th√¥ng b√°o cho React: Scene s·∫µn s√†ng!
        EventBus.emit('current-scene-ready', this);
    }

    /**
     * ‚úÖ createUI() - T·∫°o giao di·ªán ng∆∞·ªùi d√πng
     * 
     * T·∫°o c√°c ch·ªØ hi·ªÉn th·ªã tr√™n m√†n h√¨nh:
     * - Ti√™u ƒë·ªÅ game
     * - ƒêi·ªÉm s·ªë, Level, Lines
     * - Preview m·∫£nh ti·∫øp theo
     * - H∆∞·ªõng d·∫´n ph√≠m
     * 
     * üìç V·ªã tr√≠: B√™n ph·∫£i board
     */
    createUI() {
        const boardX = 200;  // Board ·ªü x = 200
        const boardY = 50;   // Board ·ªü y = 50

        // üèÜ Ti√™u ƒë·ªÅ game
        this.add.text(boardX + BOARD_WIDTH * BLOCK_SIZE / 2, 20, 'KENTAKITRIS', {
            fontFamily: 'Arial Black',
            fontSize: '32px',
            color: '#FFD700',  // M√†u v√†ng
        }).setOrigin(0.5);  // CƒÉn gi·ªØa

        // üìä B·∫£ng ƒëi·ªÉm b√™n ph·∫£i
        const scoreX = boardX + BOARD_WIDTH * BLOCK_SIZE + 50;
        const scoreY = boardY + 50;

        // Ch·ªØ "SCORE"
        this.add.text(scoreX, scoreY, 'SCORE', {
            fontFamily: 'Arial',
            fontSize: '20px',
            color: '#FFD700',
        });
        // ƒêi·ªÉm s·ªë (text ƒë·ªông, s·∫Ω c·∫≠p nh·∫≠t khi x√≥a h√†ng)
        this.scoreText = this.add.text(scoreX, scoreY + 30, '0', {
            fontFamily: 'Arial',
            fontSize: '32px',
            color: '#FFFFFF',
        });

        // Ch·ªØ "LEVEL"
        this.add.text(scoreX, scoreY + 80, 'LEVEL', {
            fontFamily: 'Arial',
            fontSize: '20px',
            color: '#FFD700',
        });
        // Level hi·ªán t·∫°i (text ƒë·ªông)
        this.levelText = this.add.text(scoreX, scoreY + 110, '1', {
            fontFamily: 'Arial',
            fontSize: '28px',
            color: '#FFFFFF',
        });

        // Ch·ªØ "LINES"
        this.add.text(scoreX, scoreY + 160, 'LINES', {
            fontFamily: 'Arial',
            fontSize: '20px',
            color: '#FFD700',
        });
        // S·ªë h√†ng ƒë√£ x√≥a (text ƒë·ªông)
        this.linesText = this.add.text(scoreX, scoreY + 190, '0', {
            fontFamily: 'Arial',
            fontSize: '28px',
            color: '#FFFFFF',
        });

        // Ch·ªØ "NEXT" (m·∫£nh ti·∫øp theo)
        this.add.text(scoreX, scoreY + 250, 'NEXT', {
            fontFamily: 'Arial',
            fontSize: '20px',
            color: '#FFD700',
        });

        // üìñ H∆∞·ªõng d·∫´n ph√≠m (·ªü d∆∞·ªõi board)
        const helpY = boardY + BOARD_HEIGHT * BLOCK_SIZE + 30;
        this.add.text(boardX, helpY, '‚Üê ‚Üí : Move  |  ‚Üë : Rotate  |  SPACE : Drop', {
            fontFamily: 'Arial',
            fontSize: '16px',
            color: '#888888',
        });
    }

    /**
     * ‚úÖ startGameLoop() - B·∫Øt ƒë·∫ßu v√≤ng l·∫∑p game
     * 
     * T·∫°o b·ªô ƒë·∫øm th·ªùi gian (Timer) ƒë·ªÉ m·∫£nh t·ª± ƒë·ªông r∆°i
     * Timer n√†y g·ªçi gameTick() m·ªói dropDelay milliseconds
     * 
     * V√≠ d·ª•: dropDelay = 1000 ‚Üí gameTick() ch·∫°y m·ªói 1 gi√¢y
     * 
     * üîÑ Loop = L·∫∑p l·∫°i m√£i m√£i cho ƒë·∫øn khi game over
     */
    startGameLoop() {
        this.dropTimer = this.time.addEvent({
            delay: this.dropDelay,           // Th·ªùi gian ch·ªù (ms)
            callback: () => this.gameTick(), // H√†m g·ªçi
            loop: true                       // L·∫∑p m√£i
        });
    }

    /**
     * ‚úÖ update() - V√≤ng l·∫∑p ch√≠nh c·ªßa Phaser
     * 
     * Phaser t·ª± ƒë·ªông g·ªçi h√†m n√†y 60 l·∫ßn/gi√¢y (60 FPS)
     * D√πng ƒë·ªÉ x·ª≠ l√Ω input (ph√≠m b·∫•m) v√† c·∫≠p nh·∫≠t hi·ªÉn th·ªã
     * 
     * üîÑ 60 FPS = 60 Frames Per Second = 60 khung h√¨nh/gi√¢y
     *    ‚Üí T·∫°o chuy·ªÉn ƒë·ªông m∆∞·ª£t m√†!
     * 
     * ‚ùì C√¢u h·ªèi: T·∫°i sao 60 l·∫ßn/gi√¢y?
     * üí° Tr·∫£ l·ªùi: V√¨ m·∫Øt ng∆∞·ªùi nh√¨n th·∫•y m∆∞·ª£t ·ªü 60 FPS!
     */
    update() {
        if (this.gameOver) return; // N·∫øu thua r·ªìi ‚Üí kh√¥ng l√†m g√¨

        // ‚å®Ô∏è X·ª≠ l√Ω input t·ª´ b√†n ph√≠m
        // JustDown = Ki·ªÉm tra ph√≠m v·ª´a ƒë∆∞·ª£c b·∫•m (kh√¥ng gi·ªØ)
        if (Phaser.Input.Keyboard.JustDown(this.cursors.left!)) {
            this.movePiece(-1, 0); // ‚Üê = Di chuy·ªÉn tr√°i
        }
        if (Phaser.Input.Keyboard.JustDown(this.cursors.right!)) {
            this.movePiece(1, 0);  // ‚Üí = Di chuy·ªÉn ph·∫£i
        }
        if (Phaser.Input.Keyboard.JustDown(this.cursors.down!)) {
            this.movePiece(0, 1);  // ‚Üì = Di chuy·ªÉn xu·ªëng (soft drop)
        }

        // üé® V·∫Ω l·∫°i m√†n h√¨nh
        this.render();
    }

    /**
     * ‚úÖ gameTick() - Nh·ªãp ƒë·∫≠p c·ªßa game (m·∫£nh t·ª± ƒë·ªông r∆°i)
     * 
     * H√†m n√†y ƒë∆∞·ª£c g·ªçi m·ªói dropDelay milliseconds (VD: 1 gi√¢y)
     * Nhi·ªám v·ª•: L√†m m·∫£nh r∆°i xu·ªëng 1 √¥
     * 
     * C√°c b∆∞·ªõc:
     * 1. Th·ª≠ di chuy·ªÉn m·∫£nh xu·ªëng 1 √¥ (0, 1)
     * 2. N·∫øu kh√¥ng di chuy·ªÉn ƒë∆∞·ª£c ‚Üí m·∫£nh ch·∫°m ƒë√°y!
     * 3. Kh√≥a m·∫£nh v√†o board
     * 4. X√≥a c√°c h√†ng ƒë·∫ßy (n·∫øu c√≥)
     * 5. Spawn m·∫£nh m·ªõi
     * 6. Ki·ªÉm tra game over (n·∫øu m·∫£nh m·ªõi b·ªã ch·∫∑n)
     * 
     * ‚ùì C√¢u h·ªèi: T·∫°i sao g·ªçi l√† "Tick"?
     * üí° Tr·∫£ l·ªùi: Tick = Ti·∫øng ƒë·ªìng h·ªì "t√≠ch t·∫Øc"
     *            Gi·ªëng ƒë·ªìng h·ªì, game "t√≠ch" m·ªói gi√¢y!
     */
    gameTick() {
        if (this.gameOver) return; // ƒê√£ thua ‚Üí kh√¥ng l√†m g√¨
        
        // Th·ª≠ di chuy·ªÉn xu·ªëng
        if (!this.movePiece(0, 1)) {
            // Kh√¥ng di chuy·ªÉn ƒë∆∞·ª£c ‚Üí ch·∫°m ƒë√°y!
            this.lockPiece();    // Kh√≥a m·∫£nh v√†o board
            this.clearLines();   // X√≥a h√†ng ƒë·∫ßy
            this.spawnPiece();   // T·∫°o m·∫£nh m·ªõi
            
            // Ki·ªÉm tra: M·∫£nh m·ªõi c√≥ b·ªã ch·∫∑n kh√¥ng?
            if (this.checkCollision(this.currentPiece!)) {
                this.endGame(); // B·ªã ch·∫∑n ‚Üí Game Over!
            }
        }
    }

    /**
     * ‚úÖ spawnPiece() - T·∫°o m·∫£nh m·ªõi
     * 
     * L·∫•y m·∫£nh t·ª´ nextPiece l√†m m·∫£nh hi·ªán t·∫°i
     * T·∫°o nextPiece m·ªõi (random)
     * 
     * C√°ch ho·∫°t ƒë·ªông:
     * 1. N·∫øu ch∆∞a c√≥ nextPiece ‚Üí t·∫°o ngay (l·∫ßn ƒë·∫ßu)
     * 2. Chuy·ªÉn nextPiece ‚Üí currentPiece
     * 3. T·∫°o nextPiece m·ªõi
     * 
     * üé≤ Random = Ng·∫´u nhi√™n (kh√¥ng bi·∫øt tr∆∞·ªõc s·∫Ω ra m·∫£nh g√¨)
     */
    spawnPiece() {
        // L·∫ßn ƒë·∫ßu ti√™n: nextPiece ch∆∞a c√≥
        if (!this.nextPiece) {
            this.nextPiece = this.getRandomPiece();
        }
        
        // Chuy·ªÉn nextPiece th√†nh currentPiece
        this.currentPiece = this.nextPiece;
        
        // T·∫°o nextPiece m·ªõi
        this.nextPiece = this.getRandomPiece();
    }

    /**
     * ‚úÖ getRandomPiece() - T·∫°o m·∫£nh ng·∫´u nhi√™n
     * 
     * Ch·ªçn 1 trong 7 lo·∫°i m·∫£nh Tetris m·ªôt c√°ch ng·∫´u nhi√™n
     * 
     * C√°c b∆∞·ªõc:
     * 1. Random s·ªë t·ª´ 0-6 (7 lo·∫°i m·∫£nh)
     * 2. L·∫•y shape t·ª´ SHAPES[index]
     * 3. T√≠nh v·ªã tr√≠ spawn (gi·ªØa board, tr√™n c√πng)
     * 4. Tr·∫£ v·ªÅ Piece object
     * 
     * V√≠ d·ª•: 
     * - Random ƒë∆∞·ª£c 4 ‚Üí M·∫£nh O (vu√¥ng)
     * - Random ƒë∆∞·ª£c 1 ‚Üí M·∫£nh I (thanh d√†i)
     * 
     * Try it: console.log(Math.floor(Math.random() * 7))
     *         ‚Üí In ra s·ªë 0-6 ng·∫´u nhi√™n!
     * 
     * ‚ùì C√¢u h·ªèi: T·∫°i sao startX = BOARD_WIDTH / 2?
     * üí° Tr·∫£ l·ªùi: ƒê·ªÉ m·∫£nh spawn ·ªü gi·ªØa board (kh√¥ng l·ªách tr√°i/ph·∫£i)
     */
    getRandomPiece(): Piece {
        // üé≤ Random s·ªë t·ª´ 0-6
        const index = Math.floor(Math.random() * SHAPES.length);
        
        // L·∫•y shape v√† m√†u t∆∞∆°ng ·ª©ng
        const shape = SHAPES[index];
        const color = index + 1; // M√†u 1-7 (0 = tr·ªëng)
        
        // üìç T√≠nh v·ªã tr√≠ spawn (gi·ªØa board, tr√™n c√πng)
        const startX = Math.floor(BOARD_WIDTH / 2) - Math.floor(shape[0].length / 2);
        
        return {
            shape: shape.map(row => [...row]), // Copy shape (tr√°nh s·ª≠a SHAPES g·ªëc)
            color: color,
            x: startX, // Gi·ªØa board
            y: 0       // Tr√™n c√πng
        };
    }

    /**
     * ‚úÖ movePiece() - Di chuy·ªÉn m·∫£nh theo h∆∞·ªõng
     * 
     * Th·ª≠ di chuy·ªÉn m·∫£nh sang tr√°i/ph·∫£i/xu·ªëng
     * N·∫øu va ch·∫°m ‚Üí quay l·∫°i v·ªã tr√≠ c≈©
     * 
     * Tham s·ªë:
     * - dx: ƒë·ªô d·ªãch chuy·ªÉn c·ªôt (tr√°i = -1, ph·∫£i = 1, kh√¥ng = 0)
     * - dy: ƒë·ªô d·ªãch chuy·ªÉn h√†ng (xu·ªëng = 1, kh√¥ng = 0)
     * 
     * V√≠ d·ª•:
     * - movePiece(1, 0) ‚Üí Di chuy·ªÉn sang ph·∫£i 1 √¥
     * - movePiece(-1, 0) ‚Üí Di chuy·ªÉn sang tr√°i 1 √¥
     * - movePiece(0, 1) ‚Üí Di chuy·ªÉn xu·ªëng 1 √¥
     * 
     * Try it: Nh·∫•n ph√≠m ‚Üê ‚Üí ‚Üì trong game!
     * 
     * ‚ùì C√¢u h·ªèi: T·∫°i sao c·∫ßn ki·ªÉm tra va ch·∫°m?
     * üí° Tr·∫£ l·ªùi: ƒê·ªÉ m·∫£nh kh√¥ng ƒëi xuy√™n t∆∞·ªùng ho·∫∑c m·∫£nh kh√°c!
     *            Gi·ªëng ƒë·ªùi th·ª±c, v·∫≠t th·ªÉ kh√¥ng xuy√™n nhau.
     */
    movePiece(dx: number, dy: number): boolean {
        if (!this.currentPiece) return false; // Ch∆∞a c√≥ m·∫£nh
        
        // üìç Di chuy·ªÉn ƒë·∫øn v·ªã tr√≠ m·ªõi
        this.currentPiece.x += dx;
        this.currentPiece.y += dy;
        
        // üîç Ki·ªÉm tra va ch·∫°m
        if (this.checkCollision(this.currentPiece)) {
            // ‚ùå Va ch·∫°m! Quay l·∫°i v·ªã tr√≠ c≈©
            this.currentPiece.x -= dx;
            this.currentPiece.y -= dy;
            return false; // Th·∫•t b·∫°i
        }
        
        return true; // ‚úÖ Th√†nh c√¥ng!
    }

    /**
     * ‚úÖ rotatePiece() - Xoay m·∫£nh 90 ƒë·ªô
     * 
     * Xoay m·∫£nh theo chi·ªÅu kim ƒë·ªìng h·ªì (clockwise)
     * N·∫øu va ch·∫°m sau khi xoay ‚Üí gi·ªØ nguy√™n h∆∞·ªõng c≈©
     * 
     * C√°ch ho·∫°t ƒë·ªông:
     * 1. L∆∞u shape c≈©
     * 2. Xoay shape 90 ƒë·ªô (d√πng rotateMatrix)
     * 3. Ki·ªÉm tra va ch·∫°m
     * 4. N·∫øu va ch·∫°m ‚Üí kh√¥i ph·ª•c shape c≈©
     * 
     * Try it: Nh·∫•n ph√≠m ‚Üë ho·∫∑c X trong game!
     * 
     * ‚ùì C√¢u h·ªèi: T·∫°i sao c·∫ßn l∆∞u oldShape?
     * üí° Tr·∫£ l·ªùi: ƒê·ªÉ kh√¥i ph·ª•c n·∫øu xoay b·ªã ch·∫∑n!
     *            Gi·ªëng nh∆∞ Ctrl+Z (Undo)
     */
    rotatePiece() {
        if (!this.currentPiece) return; // Ch∆∞a c√≥ m·∫£nh
        
        // üíæ L∆∞u shape c≈© (ƒë·ªÉ kh√¥i ph·ª•c n·∫øu c·∫ßn)
        const oldShape = this.currentPiece.shape;
        
        // üîÑ Xoay 90 ƒë·ªô
        this.currentPiece.shape = this.rotateMatrix(oldShape);
        
        // üîç Ki·ªÉm tra va ch·∫°m
        if (this.checkCollision(this.currentPiece)) {
            // ‚ùå Xoay b·ªã ch·∫∑n ‚Üí Kh√¥i ph·ª•c shape c≈©
            this.currentPiece.shape = oldShape;
        }
    }

    /**
     * ‚úÖ rotateMatrix() - Xoay ma tr·∫≠n 90 ƒë·ªô
     * 
     * Xoay m·∫£ng 2D theo chi·ªÅu kim ƒë·ªìng h·ªì
     * Thu·∫≠t to√°n: Chuy·ªÉn h√†ng th√†nh c·ªôt (t·ª´ d∆∞·ªõi l√™n tr√™n)
     * 
     * V√≠ d·ª•:
     * Input:  [[1,0],      Output: [[0,1],
     *          [1,1]]               [1,1]]
     * 
     * C√¥ng th·ª©c: rotated[c][n-1-r] = matrix[r][c]
     * - r = h√†ng c≈©, c = c·ªôt c≈©
     * - n = k√≠ch th∆∞·ªõc ma tr·∫≠n
     * 
     * ‚ùì C√¢u h·ªèi: T·∫°i sao c√¥ng th·ª©c ph·ª©c t·∫°p th·∫ø?
     * üí° Tr·∫£ l·ªùi: V√¨ ph·∫£i "l·∫≠t" ma tr·∫≠n theo ƒë∆∞·ªùng ch√©o!
     *            Gi·ªëng nh∆∞ xoay t·ªù gi·∫•y 90 ƒë·ªô.
     */
    rotateMatrix(matrix: number[][]): number[][] {
        const n = matrix.length; // K√≠ch th∆∞·ªõc ma tr·∫≠n (3x3, 4x4...)
        
        // T·∫°o ma tr·∫≠n m·ªõi (to√†n s·ªë 0)
        const rotated = Array.from({ length: n }, () => Array(n).fill(0));
        
        // üîÑ Xoay t·ª´ng √¥
        for (let r = 0; r < n; r++) {        // r = h√†ng
            for (let c = 0; c < n; c++) {    // c = c·ªôt
                rotated[c][n - 1 - r] = matrix[r][c];
            }
        }
        
        return rotated;
    }

    hardDrop() {
        if (!this.currentPiece) return;
        
        while (this.movePiece(0, 1)) {
            // Keep moving down
        }
        
        this.lockPiece();
        this.clearLines();
        this.spawnPiece();
        
        if (this.checkCollision(this.currentPiece!)) {
            this.endGame();
        }
    }

    /**
     * ‚úÖ checkCollision() - Ki·ªÉm tra va ch·∫°m
     * 
     * Ki·ªÉm tra xem m·∫£nh c√≥ va ch·∫°m v·ªõi t∆∞·ªùng ho·∫∑c m·∫£nh kh√°c kh√¥ng
     * 
     * C√°c tr∆∞·ªùng h·ª£p va ch·∫°m:
     * 1. V∆∞·ª£t ra ngo√†i tr√°i/ph·∫£i board (x < 0 ho·∫∑c x >= BOARD_WIDTH)
     * 2. V∆∞·ª£t ra ngo√†i d∆∞·ªõi board (y >= BOARD_HEIGHT)
     * 3. Ch·∫°m m·∫£nh ƒë√£ kh√≥a (board[y][x] !== 0)
     * 
     * ‚ùì C√¢u h·ªèi: T·∫°i sao kh√¥ng ki·ªÉm tra y < 0?
     * üí° Tr·∫£ l·ªùi: V√¨ m·∫£nh c√≥ th·ªÉ spawn ·ªü tr√™n board (y √¢m)!
     *            Ch·ªâ ph·∫ßn d∆∞·ªõi m·ªõi nh√¨n th·∫•y.
     */
    checkCollision(piece: Piece): boolean {
        // Duy·ªát t·ª´ng √¥ c·ªßa m·∫£nh
        for (let r = 0; r < piece.shape.length; r++) {
            for (let c = 0; c < piece.shape[r].length; c++) {
                if (piece.shape[r][c] !== 0) { // Ch·ªâ ki·ªÉm tra √¥ c√≥ m·∫£nh
                    const newY = piece.y + r;
                    const newX = piece.x + c;
                    
                    // ‚ùå Ki·ªÉm tra v∆∞·ª£t tr√°i/ph·∫£i/d∆∞·ªõi
                    if (newX < 0 || newX >= BOARD_WIDTH || newY >= BOARD_HEIGHT) {
                        return true; // Va ch·∫°m!
                    }
                    
                    // ‚ùå Ki·ªÉm tra ch·∫°m m·∫£nh ƒë√£ kh√≥a
                    if (newY >= 0 && this.board[newY][newX] !== 0) {
                        return true; // Va ch·∫°m!
                    }
                }
            }
        }
        return false; // ‚úÖ Kh√¥ng va ch·∫°m
    }

    lockPiece() {
        if (!this.currentPiece) return;
        
        for (let r = 0; r < this.currentPiece.shape.length; r++) {
            for (let c = 0; c < this.currentPiece.shape[r].length; c++) {
                if (this.currentPiece.shape[r][c] !== 0) {
                    const y = this.currentPiece.y + r;
                    const x = this.currentPiece.x + c;
                    if (y >= 0 && y < BOARD_HEIGHT) {
                        this.board[y][x] = this.currentPiece.color;
                    }
                }
            }
        }
    }

    clearLines() {
        let linesCleared = 0;
        
        for (let y = BOARD_HEIGHT - 1; y >= 0; y--) {
            if (this.board[y].every(cell => cell !== 0)) {
                this.board.splice(y, 1);
                this.board.unshift(Array(BOARD_WIDTH).fill(0));
                linesCleared++;
                y++; // Check same row again
            }
        }
        
        if (linesCleared > 0) {
            this.lines += linesCleared;
            const points = [0, 10, 30, 50, 80][linesCleared] * this.level;
            this.score += points;
            
            // Level up
            const newLevel = Math.floor(this.lines / 10) + 1;
            if (newLevel > this.level) {
                this.level = newLevel;
                this.dropDelay = Math.max(100, 1000 - (this.level - 1) * 100);
                // Restart the timer with new delay
                this.dropTimer.remove();
                this.startGameLoop();
            }
            
            this.updateUI();
        }
    }

    updateUI() {
        this.scoreText.setText(this.score.toString());
        this.levelText.setText(this.level.toString());
        this.linesText.setText(this.lines.toString());
    }

    render() {
        const boardX = 200;
        const boardY = 50;

        // Clear graphics
        this.boardGraphics.clear();
        this.pieceGraphics.clear();
        this.nextPieceGraphics.clear();

        // Draw board border
        this.boardGraphics.lineStyle(4, 0x888888);
        this.boardGraphics.strokeRect(
            boardX - 2,
            boardY - 2,
            BOARD_WIDTH * BLOCK_SIZE + 4,
            BOARD_HEIGHT * BLOCK_SIZE + 4
        );

        // Draw board grid
        this.boardGraphics.lineStyle(1, 0x333333);
        for (let y = 0; y < BOARD_HEIGHT; y++) {
            for (let x = 0; x < BOARD_WIDTH; x++) {
                const px = boardX + x * BLOCK_SIZE;
                const py = boardY + y * BLOCK_SIZE;
                this.boardGraphics.strokeRect(px, py, BLOCK_SIZE, BLOCK_SIZE);
                
                if (this.board[y][x] !== 0) {
                    this.boardGraphics.fillStyle(COLORS[this.board[y][x]], 1);
                    this.boardGraphics.fillRect(px + 1, py + 1, BLOCK_SIZE - 2, BLOCK_SIZE - 2);
                }
            }
        }

        // Draw current piece
        if (this.currentPiece) {
            for (let r = 0; r < this.currentPiece.shape.length; r++) {
                for (let c = 0; c < this.currentPiece.shape[r].length; c++) {
                    if (this.currentPiece.shape[r][c] !== 0) {
                        const px = boardX + (this.currentPiece.x + c) * BLOCK_SIZE;
                        const py = boardY + (this.currentPiece.y + r) * BLOCK_SIZE;
                        
                        this.pieceGraphics.fillStyle(COLORS[this.currentPiece.color], 1);
                        this.pieceGraphics.fillRect(px + 1, py + 1, BLOCK_SIZE - 2, BLOCK_SIZE - 2);
                        
                        this.pieceGraphics.lineStyle(2, 0xFFFFFF, 0.3);
                        this.pieceGraphics.strokeRect(px + 2, py + 2, BLOCK_SIZE - 4, BLOCK_SIZE - 4);
                    }
                }
            }
        }

        // Draw next piece
        if (this.nextPiece) {
            const nextX = boardX + BOARD_WIDTH * BLOCK_SIZE + 50;
            const nextY = 400;
            const nextSize = 20;
            
            for (let r = 0; r < this.nextPiece.shape.length; r++) {
                for (let c = 0; c < this.nextPiece.shape[r].length; c++) {
                    if (this.nextPiece.shape[r][c] !== 0) {
                        const px = nextX + c * nextSize;
                        const py = nextY + r * nextSize;
                        
                        this.nextPieceGraphics.fillStyle(COLORS[this.nextPiece.color], 1);
                        this.nextPieceGraphics.fillRect(px, py, nextSize - 2, nextSize - 2);
                    }
                }
            }
        }
    }

    endGame() {
        this.gameOver = true;
        this.dropTimer.remove();
        
        // üíæ L∆∞u ƒëi·ªÉm v√†o Firebase leaderboard
        // G·ªçi h√†m static saveScore() c·ªßa Leaderboard scene
        // Firebase t·ª± ƒë·ªông l∆∞u ƒëi·ªÉm l√™n cloud v√† chia s·∫ª v·ªõi m·ªçi ng∆∞·ªùi!
        
        // üë§ L·∫•y t√™n ng∆∞·ªùi ch∆°i t·ª´ localStorage (n·∫øu c√≥)
        const playerName = localStorage.getItem('playerName') || 'Anonymous';
        
        Leaderboard.saveScore(this.score, playerName);
        
        this.add.text(512, 384, 'GAME OVER', {
            fontFamily: 'Arial Black',
            fontSize: '64px',
            color: '#FF0000',
            stroke: '#000000',
            strokeThickness: 8,
        }).setOrigin(0.5);
        
        this.time.delayedCall(2000, () => {
            this.scene.start('GameOver', { score: this.score });
        });
    }

    changeScene() {
        this.scene.start('GameOver');
    }
}
