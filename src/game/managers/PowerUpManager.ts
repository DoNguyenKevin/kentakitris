// src/game/managers/PowerUpManager.ts
// ======================================================
// ‚úÖ Power-Up Manager - Qu·∫£n l√Ω c√°c k·ªπ nƒÉng ƒë·∫∑c bi·ªát
// 
// Class n√†y ch·ªãu tr√°ch nhi·ªám:
// - Qu·∫£n l√Ω tr·∫°ng th√°i c·ªßa t·∫•t c·∫£ power-ups
// - K√≠ch ho·∫°t/t·∫Øt power-ups
// - X·ª≠ l√Ω logic cho t·ª´ng lo·∫°i power-up
// - Render hi·ªáu ·ª©ng visual
// ======================================================

import { Scene } from 'phaser';
import { 
    PowerUpType, 
    PowerUpState, 
    PowerUpConfig,
    BOMB_CONFIG,
    MAGIC_BLOCK_CONFIG,
    REVERSE_GRAVITY_CONFIG,
    TELEPORT_CONFIG,
    WIDE_MODE_CONFIG
} from '../constants/PowerUpConstants';
import { 
    BOARD_WIDTH, 
    BOARD_HEIGHT, 
    BLOCK_SIZE,
    Piece 
} from '../constants/GameConstants';

/**
 * ‚úÖ PowerUpManager - Qu·∫£n l√Ω t·∫•t c·∫£ logic v·ªÅ Power-Ups
 * 
 * C√°ch ho·∫°t ƒë·ªông:
 * 1. L∆∞u tr·ªØ tr·∫°ng th√°i c·ªßa c√°c power-ups ƒëang active
 * 2. X·ª≠ l√Ω k√≠ch ho·∫°t power-ups khi m·∫£nh ƒë∆∞·ª£c ƒë·∫∑t
 * 3. C·∫≠p nh·∫≠t timers cho power-ups c√≥ th·ªùi gian
 * 4. V·∫Ω hi·ªáu ·ª©ng visual
 * 
 * Try it: K√≠ch ho·∫°t power-up v√† xem magic x·∫£y ra!
 */
export class PowerUpManager {
    private scene: Scene;
    private boardX: number;
    private boardY: number;
    private board: number[][];
    private activePowerUps: Map<PowerUpType, PowerUpState>;
    
    // üìä State cho t·ª´ng power-up
    private isReverseGravityActive: boolean = false;
    private isWideModeActive: boolean = false;
    private isTeleportActive: boolean = false;
    private originalBoardWidth: number = BOARD_WIDTH;
    private currentBoardWidth: number = BOARD_WIDTH;
    
    // üé® Graphics v√† UI
    private graphics: Phaser.GameObjects.Graphics;
    private teleportHintGraphics: Phaser.GameObjects.Graphics;
    
    /**
     * ‚úÖ Constructor - Kh·ªüi t·∫°o PowerUpManager
     * 
     * @param scene - Phaser Scene
     * @param boardX - V·ªã tr√≠ X c·ªßa board
     * @param boardY - V·ªã tr√≠ Y c·ªßa board
     * @param board - Tham chi·∫øu ƒë·∫øn board game
     */
    constructor(
        scene: Scene,
        boardX: number,
        boardY: number,
        board: number[][]
    ) {
        this.scene = scene;
        this.boardX = boardX;
        this.boardY = boardY;
        this.board = board;
        this.activePowerUps = new Map();
        this.graphics = scene.add.graphics();
        this.teleportHintGraphics = scene.add.graphics();
    }
    
    /**
     * ‚úÖ activatePowerUp() - K√≠ch ho·∫°t m·ªôt power-up
     * 
     * M·ª•c ti√™u: B·∫≠t power-up v√† thi·∫øt l·∫≠p state ban ƒë·∫ßu
     * 
     * C√°ch ho·∫°t ƒë·ªông:
     * 1. L·∫•y config c·ªßa power-up
     * 2. T·∫°o PowerUpState m·ªõi
     * 3. Th√™m v√†o activePowerUps map
     * 4. X·ª≠ l√Ω logic ƒë·∫∑c bi·ªát cho t·ª´ng lo·∫°i
     * 
     * @param type - Lo·∫°i power-up c·∫ßn k√≠ch ho·∫°t
     * @param uses - S·ªë l·∫ßn d√πng (optional, d√πng default n·∫øu kh√¥ng truy·ªÅn)
     * @param duration - Th·ªùi gian ho·∫°t ƒë·ªông (optional, d√πng default n·∫øu kh√¥ng truy·ªÅn)
     */
    activatePowerUp(type: PowerUpType, uses?: number, duration?: number): void {
        let config: PowerUpConfig;
        
        // L·∫•y config t∆∞∆°ng ·ª©ng
        switch (type) {
            case PowerUpType.BOMB:
                config = BOMB_CONFIG;
                break;
            case PowerUpType.MAGIC_BLOCK:
                config = MAGIC_BLOCK_CONFIG;
                break;
            case PowerUpType.REVERSE_GRAVITY:
                config = REVERSE_GRAVITY_CONFIG;
                break;
            case PowerUpType.TELEPORT:
                config = TELEPORT_CONFIG;
                break;
            case PowerUpType.WIDE_MODE:
                config = WIDE_MODE_CONFIG;
                break;
        }
        
        // T·∫°o state m·ªõi
        const state: PowerUpState = {
            type: type,
            uses: uses ?? config.defaultUses ?? 1,
            duration: duration ?? config.defaultDuration,
            active: true
        };
        
        this.activePowerUps.set(type, state);
        
        // X·ª≠ l√Ω logic ƒë·∫∑c bi·ªát cho t·ª´ng lo·∫°i
        switch (type) {
            case PowerUpType.REVERSE_GRAVITY:
                this.activateReverseGravity();
                break;
            case PowerUpType.WIDE_MODE:
                this.activateWideMode();
                break;
            case PowerUpType.TELEPORT:
                this.activateTeleport();
                break;
        }
        
        console.log(`${config.emoji} ${config.name} activated!`);
    }
    
    /**
     * ‚úÖ deactivatePowerUp() - T·∫Øt m·ªôt power-up
     * 
     * @param type - Lo·∫°i power-up c·∫ßn t·∫Øt
     */
    deactivatePowerUp(type: PowerUpType): void {
        const state = this.activePowerUps.get(type);
        if (!state) return;
        
        state.active = false;
        this.activePowerUps.delete(type);
        
        // X·ª≠ l√Ω logic t·∫Øt ƒë·∫∑c bi·ªát
        switch (type) {
            case PowerUpType.REVERSE_GRAVITY:
                this.deactivateReverseGravity();
                break;
            case PowerUpType.WIDE_MODE:
                this.deactivateWideMode();
                break;
            case PowerUpType.TELEPORT:
                this.deactivateTeleport();
                break;
        }
        
        console.log(`Power-up ${type} deactivated!`);
    }
    
    /**
     * ‚úÖ update() - C·∫≠p nh·∫≠t power-ups m·ªói frame
     * 
     * G·ªçi h√†m n√†y trong update() c·ªßa Game scene
     * Nhi·ªám v·ª•: C·∫≠p nh·∫≠t timers v√† t·ª± ƒë·ªông t·∫Øt khi h·∫øt th·ªùi gian
     * 
     * @param delta - Th·ªùi gian tr√¥i qua t·ª´ frame tr∆∞·ªõc (ms)
     */
    update(delta: number): void {
        // Duy·ªát qua t·∫•t c·∫£ power-ups ƒëang active
        for (const [type, state] of this.activePowerUps) {
            // N·∫øu c√≥ duration (power-up theo th·ªùi gian)
            if (state.duration !== undefined && state.duration > 0) {
                state.duration -= delta;
                
                // H·∫øt th·ªùi gian ‚Üí t·∫Øt
                if (state.duration <= 0) {
                    this.deactivatePowerUp(type);
                }
            }
        }
    }
    
    // ==========================================
    // üí£ BOMB SKILL LOGIC
    // ==========================================
    
    /**
     * ‚úÖ activateBombEffect() - K√≠ch ho·∫°t hi·ªáu ·ª©ng bom
     * 
     * T·∫°o v·ª• n·ªï 3x3 xung quanh v·ªã tr√≠ m·∫£nh
     * 
     * @param piece - M·∫£nh v·ª´a ƒë∆∞·ª£c ƒë·∫∑t
     * @returns true n·∫øu ƒë√£ k√≠ch ho·∫°t bomb
     */
    activateBombEffect(piece: Piece): boolean {
        const state = this.activePowerUps.get(PowerUpType.BOMB);
        if (!state || state.uses <= 0) return false;
        
        // T√¨m t√¢m c·ªßa m·∫£nh gh√©p
        let centerX = 0;
        let centerY = 0;
        let blockCount = 0;
        
        piece.shape.forEach((row, r) => {
            row.forEach((cell, c) => {
                if (cell) {
                    centerX += piece.x + c;
                    centerY += piece.y + r;
                    blockCount++;
                }
            });
        });
        
        centerX = Math.floor(centerX / blockCount);
        centerY = Math.floor(centerY / blockCount);
        
        // T·∫°o v·ª• n·ªï 3x3
        for (let dy = -1; dy <= 1; dy++) {
            for (let dx = -1; dx <= 1; dx++) {
                const explodeX = centerX + dx;
                const explodeY = centerY + dy;
                
                if (explodeX >= 0 && explodeX < this.currentBoardWidth && 
                    explodeY >= 0 && explodeY < BOARD_HEIGHT) {
                    this.board[explodeY][explodeX] = 0;
                }
            }
        }
        
        // Gi·∫£m s·ªë l·∫ßn d√πng
        state.uses--;
        if (state.uses <= 0) {
            this.deactivatePowerUp(PowerUpType.BOMB);
        }
        
        return true;
    }
    
    /**
     * ‚úÖ hasBombPending() - Ki·ªÉm tra c√≥ bomb ch·ªù k√≠ch ho·∫°t kh√¥ng
     */
    hasBombPending(): boolean {
        const state = this.activePowerUps.get(PowerUpType.BOMB);
        return state ? state.uses > 0 : false;
    }
    
    // ==========================================
    // ‚ú® MAGIC BLOCK SKILL LOGIC
    // ==========================================
    
    /**
     * ‚úÖ activateMagicBlockEffect() - K√≠ch ho·∫°t hi·ªáu ·ª©ng magic block
     * 
     * L·∫•p ƒë·∫ßy c√°c kho·∫£ng tr·ªëng trong board
     * 
     * @param piece - M·∫£nh v·ª´a ƒë∆∞·ª£c ƒë·∫∑t
     * @returns true n·∫øu ƒë√£ k√≠ch ho·∫°t magic block
     */
    activateMagicBlockEffect(piece: Piece): boolean {
        const state = this.activePowerUps.get(PowerUpType.MAGIC_BLOCK);
        if (!state || state.uses <= 0) return false;
        
        // T√¨m h√†ng th·∫•p nh·∫•t m√† m·∫£nh ch·∫°m v√†o
        let lowestRow = 0;
        piece.shape.forEach((row, r) => {
            row.forEach((cell, c) => {
                if (cell) {
                    const boardY = piece.y + r;
                    if (boardY > lowestRow) {
                        lowestRow = boardY;
                    }
                }
            });
        });
        
        // T√¨m c√°c kho·∫£ng tr·ªëng
        const gaps = this.findGaps(lowestRow);
        
        // L·∫•p ƒë·∫ßy t·ªëi ƒëa 5 kho·∫£ng tr·ªëng
        const maxFills = 5;
        let filled = 0;
        
        for (const gap of gaps) {
            if (filled >= maxFills) break;
            this.board[gap.y][gap.x] = piece.color;
            filled++;
        }
        
        // Gi·∫£m s·ªë l·∫ßn d√πng
        state.uses--;
        if (state.uses <= 0) {
            this.deactivatePowerUp(PowerUpType.MAGIC_BLOCK);
        }
        
        return filled > 0;
    }
    
    /**
     * üîç findGaps() - T√¨m c√°c kho·∫£ng tr·ªëng trong board
     * 
     * Gap = √¥ tr·ªëng c√≥ √≠t nh·∫•t 1 √¥ kh√¥ng tr·ªëng b√™n d∆∞·ªõi
     */
    private findGaps(startRow: number): Array<{x: number, y: number, priority: number}> {
        const gaps: Array<{x: number, y: number, priority: number}> = [];
        
        for (let y = startRow; y < BOARD_HEIGHT; y++) {
            for (let x = 0; x < this.currentBoardWidth; x++) {
                if (this.board[y][x] === 0) {
                    // Ki·ªÉm tra c√≥ √¥ kh√¥ng tr·ªëng b√™n d∆∞·ªõi kh√¥ng
                    let hasBlockBelow = false;
                    for (let checkY = y + 1; checkY < BOARD_HEIGHT; checkY++) {
                        if (this.board[checkY][x] !== 0) {
                            hasBlockBelow = true;
                            break;
                        }
                    }
                    
                    if (hasBlockBelow) {
                        const priority = BOARD_HEIGHT - y;
                        gaps.push({ x, y, priority });
                    }
                }
            }
        }
        
        gaps.sort((a, b) => b.priority - a.priority);
        return gaps;
    }
    
    /**
     * ‚úÖ hasMagicBlockPending() - Ki·ªÉm tra c√≥ magic block ch·ªù k√≠ch ho·∫°t kh√¥ng
     */
    hasMagicBlockPending(): boolean {
        const state = this.activePowerUps.get(PowerUpType.MAGIC_BLOCK);
        return state ? state.uses > 0 : false;
    }
    
    // ==========================================
    // üî∫ REVERSE GRAVITY SKILL LOGIC
    // ==========================================
    
    /**
     * ‚úÖ activateReverseGravity() - K√≠ch ho·∫°t ƒë·∫£o tr·ªçng l·ª±c
     */
    private activateReverseGravity(): void {
        this.isReverseGravityActive = true;
        console.log('üî∫ Reverse Gravity activated!');
    }
    
    /**
     * ‚úÖ deactivateReverseGravity() - T·∫Øt ƒë·∫£o tr·ªçng l·ª±c
     */
    private deactivateReverseGravity(): void {
        this.isReverseGravityActive = false;
        console.log('üî∫ Reverse Gravity deactivated!');
    }
    
    /**
     * ‚úÖ isReverseGravityActive() - Ki·ªÉm tra reverse gravity c√≥ ƒëang ho·∫°t ƒë·ªông kh√¥ng
     */
    isReverseGravity(): boolean {
        return this.isReverseGravityActive;
    }
    
    /**
     * ‚úÖ getGravityDirection() - L·∫•y h∆∞·ªõng tr·ªçng l·ª±c
     * 
     * @returns -1 n·∫øu ƒëi l√™n (reverse), +1 n·∫øu ƒëi xu·ªëng (normal)
     */
    getGravityDirection(): number {
        return this.isReverseGravityActive ? -1 : 1;
    }
    
    /**
     * ‚úÖ adjustSpawnPosition() - ƒêi·ªÅu ch·ªânh v·ªã tr√≠ spawn cho reverse gravity
     * 
     * @param piece - M·∫£nh c·∫ßn spawn
     * @returns M·∫£nh v·ªõi v·ªã tr√≠ ƒë√£ ƒëi·ªÅu ch·ªânh
     */
    adjustSpawnPosition(piece: Piece): Piece {
        if (!this.isReverseGravityActive) {
            // V·ªã tr√≠ b√¨nh th∆∞·ªùng (·ªü tr√™n)
            return {
                ...piece,
                x: Math.floor((this.currentBoardWidth - piece.shape[0].length) / 2),
                y: 0
            };
        } else {
            // V·ªã tr√≠ khi reverse (·ªü d∆∞·ªõi)
            return {
                ...piece,
                x: Math.floor((this.currentBoardWidth - piece.shape[0].length) / 2),
                y: BOARD_HEIGHT - piece.shape.length
            };
        }
    }
    
    // ==========================================
    // üåÄ TELEPORT SKILL LOGIC
    // ==========================================
    
    /**
     * ‚úÖ activateTeleport() - K√≠ch ho·∫°t ch·∫ø ƒë·ªô teleport
     */
    private activateTeleport(): void {
        this.isTeleportActive = true;
        console.log('üåÄ Teleport mode activated!');
    }
    
    /**
     * ‚úÖ deactivateTeleport() - T·∫Øt ch·∫ø ƒë·ªô teleport
     */
    private deactivateTeleport(): void {
        this.isTeleportActive = false;
        this.teleportHintGraphics.clear();
        console.log('üåÄ Teleport mode deactivated!');
    }
    
    /**
     * ‚úÖ isTeleportActive() - Ki·ªÉm tra teleport c√≥ ƒëang ho·∫°t ƒë·ªông kh√¥ng
     */
    isTeleport(): boolean {
        return this.isTeleportActive;
    }
    
    /**
     * ‚úÖ tryTeleport() - Th·ª≠ d·ªãch chuy·ªÉn m·∫£nh ƒë·∫øn v·ªã tr√≠ m·ªõi
     * 
     * @param currentPiece - M·∫£nh hi·ªán t·∫°i
     * @param targetX - V·ªã tr√≠ X ƒë√≠ch
     * @param targetY - V·ªã tr√≠ Y ƒë√≠ch
     * @param checkCollision - H√†m ki·ªÉm tra va ch·∫°m
     * @returns M·∫£nh m·ªõi n·∫øu th√†nh c√¥ng, null n·∫øu th·∫•t b·∫°i
     */
    tryTeleport(
        currentPiece: Piece,
        targetX: number,
        targetY: number,
        checkCollision: (piece: Piece) => boolean
    ): Piece | null {
        if (!this.isTeleportActive) return null;
        
        const newPiece: Piece = {
            ...currentPiece,
            x: targetX,
            y: targetY
        };
        
        if (checkCollision(newPiece)) {
            return null; // V·ªã tr√≠ kh√¥ng h·ª£p l·ªá
        }
        
        // Consume teleport use
        const state = this.activePowerUps.get(PowerUpType.TELEPORT);
        if (state) {
            state.uses--;
            if (state.uses <= 0) {
                this.deactivatePowerUp(PowerUpType.TELEPORT);
            }
        }
        
        return newPiece;
    }
    
    // ==========================================
    // üìè WIDE MODE SKILL LOGIC
    // ==========================================
    
    /**
     * ‚úÖ activateWideMode() - K√≠ch ho·∫°t wide mode
     * 
     * M·ªü r·ªông board t·ª´ 10 ‚Üí 12 c·ªôt
     */
    private activateWideMode(): void {
        if (this.isWideModeActive) return;
        
        this.isWideModeActive = true;
        this.originalBoardWidth = this.currentBoardWidth;
        const newWidth = 12;
        this.currentBoardWidth = newWidth;
        
        // M·ªü r·ªông board
        const addColumns = newWidth - this.originalBoardWidth;
        const leftPadding = Math.floor(addColumns / 2);
        const rightPadding = addColumns - leftPadding;
        
        for (let y = 0; y < BOARD_HEIGHT; y++) {
            this.board[y] = [
                ...Array(leftPadding).fill(0),
                ...this.board[y],
                ...Array(rightPadding).fill(0)
            ];
        }
        
        console.log('üìè Wide Mode activated! Board width:', newWidth);
    }
    
    /**
     * ‚úÖ deactivateWideMode() - T·∫Øt wide mode
     * 
     * Thu h·∫πp board v·ªÅ 10 c·ªôt
     */
    private deactivateWideMode(): void {
        if (!this.isWideModeActive) return;
        
        this.isWideModeActive = false;
        
        // Thu h·∫πp board
        const addColumns = this.currentBoardWidth - this.originalBoardWidth;
        const leftCut = Math.floor(addColumns / 2);
        const rightBound = leftCut + this.originalBoardWidth;
        
        for (let y = 0; y < BOARD_HEIGHT; y++) {
            this.board[y] = this.board[y].slice(leftCut, rightBound);
        }
        
        this.currentBoardWidth = this.originalBoardWidth;
        console.log('üìè Wide Mode deactivated! Board width:', this.originalBoardWidth);
    }
    
    /**
     * ‚úÖ isWideMode() - Ki·ªÉm tra wide mode c√≥ ƒëang ho·∫°t ƒë·ªông kh√¥ng
     */
    isWideMode(): boolean {
        return this.isWideModeActive;
    }
    
    /**
     * ‚úÖ getCurrentBoardWidth() - L·∫•y chi·ªÅu r·ªông board hi·ªán t·∫°i
     */
    getCurrentBoardWidth(): number {
        return this.currentBoardWidth;
    }
    
    // ==========================================
    // üé® RENDERING
    // ==========================================
    
    /**
     * ‚úÖ render() - V·∫Ω c√°c hi·ªáu ·ª©ng visual c·ªßa power-ups
     * 
     * G·ªçi h√†m n√†y trong render() c·ªßa Game scene
     */
    render(): void {
        this.graphics.clear();
        this.teleportHintGraphics.clear();
        
        // V·∫Ω hint cho teleport mode
        if (this.isTeleportActive) {
            this.renderTeleportHints();
        }
    }
    
    /**
     * üé® renderTeleportHints() - V·∫Ω g·ª£i √Ω cho teleport mode
     */
    private renderTeleportHints(): void {
        this.teleportHintGraphics.lineStyle(2, 0x00FFFF, 0.5);
        
        // V·∫Ω grid hints
        for (let x = 0; x <= this.currentBoardWidth; x++) {
            const screenX = this.boardX + x * BLOCK_SIZE;
            this.teleportHintGraphics.lineBetween(
                screenX, this.boardY,
                screenX, this.boardY + BOARD_HEIGHT * BLOCK_SIZE
            );
        }
        
        for (let y = 0; y <= BOARD_HEIGHT; y++) {
            const screenY = this.boardY + y * BLOCK_SIZE;
            this.teleportHintGraphics.lineBetween(
                this.boardX, screenY,
                this.boardX + this.currentBoardWidth * BLOCK_SIZE, screenY
            );
        }
    }
    
    /**
     * ‚úÖ getActivePowerUps() - L·∫•y danh s√°ch power-ups ƒëang active
     * 
     * @returns Array of PowerUpState
     */
    getActivePowerUps(): PowerUpState[] {
        return Array.from(this.activePowerUps.values());
    }
    
    /**
     * ‚úÖ reset() - Reset t·∫•t c·∫£ power-ups
     * 
     * G·ªçi khi game over ho·∫∑c restart
     */
    reset(): void {
        for (const type of this.activePowerUps.keys()) {
            this.deactivatePowerUp(type);
        }
        this.activePowerUps.clear();
        this.graphics.clear();
        this.teleportHintGraphics.clear();
    }
}
