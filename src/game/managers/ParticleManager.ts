// src/game/managers/ParticleManager.ts
// ======================================================
// ‚úÖ Particle Manager - Qu·∫£n l√Ω hi·ªáu ·ª©ng particles
// 
// Manager n√†y t·∫°o c√°c hi·ªáu ·ª©ng visual:
// - Score particles khi x√≥a h√†ng (ƒëi·ªÉm bay l√™n)
// - Line clear flash effect (h√†ng s√°ng l√™n khi x√≥a)
// - Level up celebration (ph√°o hoa!)
// - Combo effects (nhi·ªÅu h√†ng c√πng l√∫c)
// 
// S·ª≠ d·ª•ng Phaser's Particle System v√† Tweens
// ======================================================

import { Scene } from 'phaser';

/**
 * ‚úÖ ParticleManager - Qu·∫£n l√Ω hi·ªáu ·ª©ng particles v√† animations
 * 
 * T·∫°o c√°c hi·ªáu ·ª©ng ƒë·∫πp m·∫Øt ƒë·ªÉ tƒÉng tr·∫£i nghi·ªám ng∆∞·ªùi ch∆°i
 */
export class ParticleManager {
    private scene: Scene;
    private particleEmitters: Phaser.GameObjects.Particles.ParticleEmitter[] = [];

    constructor(scene: Scene) {
        this.scene = scene;
    }

    /**
     * ‚úÖ createScoreParticle() - T·∫°o text particle bay l√™n
     * 
     * Hi·ªÉn th·ªã ƒëi·ªÉm s·ªë bay l√™n khi x√≥a h√†ng
     * 
     * @param x - V·ªã tr√≠ X (pixel)
     * @param y - V·ªã tr√≠ Y (pixel)
     * @param score - ƒêi·ªÉm s·ªë hi·ªÉn th·ªã
     * @param targetX - V·ªã tr√≠ X ƒë√≠ch (score display)
     * @param targetY - V·ªã tr√≠ Y ƒë√≠ch (score display)
     */
    createScoreParticle(
        x: number,
        y: number,
        score: number,
        targetX: number,
        targetY: number
    ) {
        // üìù T·∫°o text object
        const scoreText = this.scene.add.text(x, y, `+${score}`, {
            fontFamily: 'Arial Black',
            fontSize: '32px',
            color: '#FFD700',
            stroke: '#000000',
            strokeThickness: 6,
        }).setOrigin(0.5);

        // ‚ú® Hi·ªáu ·ª©ng s√°ng
        scoreText.setAlpha(0);
        
        // üé¨ Animation bay l√™n v√† v·ªÅ score display
        this.scene.tweens.add({
            targets: scoreText,
            alpha: 1,
            duration: 200,
            ease: 'Power2',
        });

        this.scene.tweens.add({
            targets: scoreText,
            x: targetX,
            y: targetY,
            scale: 0.5,
            duration: 800,
            ease: 'Power2',
            delay: 200,
            onComplete: () => {
                // Fade out v√† destroy
                this.scene.tweens.add({
                    targets: scoreText,
                    alpha: 0,
                    duration: 200,
                    onComplete: () => scoreText.destroy(),
                });
            },
        });

        // üåü Th√™m rotation cho vui
        this.scene.tweens.add({
            targets: scoreText,
            angle: 360,
            duration: 800,
            ease: 'Linear',
            delay: 200,
        });
    }

    /**
     * ‚úÖ createLineClearFlash() - T·∫°o flash effect cho h√†ng b·ªã x√≥a
     * 
     * Hi·ªáu ·ª©ng: H√†ng s√°ng l√™n tr·∫Øng r·ªìi bi·∫øn m·∫•t
     * 
     * @param y - S·ªë th·ª© t·ª± h√†ng (0-19)
     * @param boardX - X c·ªßa board
     * @param boardY - Y c·ªßa board
     * @param boardWidth - Chi·ªÅu r·ªông board (s·ªë c·ªôt)
     * @param blockSize - K√≠ch th∆∞·ªõc m·ªói block
     */
    createLineClearFlash(
        y: number,
        boardX: number,
        boardY: number,
        boardWidth: number,
        blockSize: number
    ) {
        // üé® T·∫°o rectangle s√°ng
        const flashRect = this.scene.add.rectangle(
            boardX + (boardWidth * blockSize) / 2,
            boardY + y * blockSize + blockSize / 2,
            boardWidth * blockSize,
            blockSize,
            0xffffff,
            0.8
        );

        flashRect.setDepth(100);

        // ‚ú® Flash animation (nh·∫•p nh√°y 3 l·∫ßn)
        this.scene.tweens.add({
            targets: flashRect,
            alpha: 0,
            duration: 100,
            yoyo: true,
            repeat: 2,
            onComplete: () => flashRect.destroy(),
        });
    }

    /**
     * ‚úÖ createLevelUpEffect() - Hi·ªáu ·ª©ng level up
     * 
     * Hi·ªÉn th·ªã text "LEVEL UP!" v√† ph√°o hoa
     */
    createLevelUpEffect(level: number) {
        const width = this.scene.cameras.main.width;
        const height = this.scene.cameras.main.height;

        // üèÜ Text "LEVEL UP!"
        const levelUpText = this.scene.add.text(
            width / 2,
            height / 2,
            `LEVEL ${level}!`,
            {
                fontFamily: 'Arial Black',
                fontSize: '48px',
                color: '#FFD700',
                stroke: '#000000',
                strokeThickness: 8,
            }
        ).setOrigin(0.5).setAlpha(0).setScale(0);

        levelUpText.setDepth(1000);

        // üé¨ Zoom in ‚Üí Zoom out
        this.scene.tweens.add({
            targets: levelUpText,
            alpha: 1,
            scale: 1.5,
            duration: 300,
            ease: 'Back.easeOut',
            onComplete: () => {
                // Hold for a moment
                this.scene.time.delayedCall(500, () => {
                    this.scene.tweens.add({
                        targets: levelUpText,
                        alpha: 0,
                        scale: 2,
                        duration: 300,
                        ease: 'Power2',
                        onComplete: () => levelUpText.destroy(),
                    });
                });
            },
        });

        // üéÜ T·∫°o particles (stars)
        this.createStarBurst(width / 2, height / 2);
    }

    /**
     * ‚úÖ createStarBurst() - T·∫°o ph√°o hoa sao
     * 
     * Nhi·ªÅu sao bay ra t·ª´ 1 ƒëi·ªÉm
     * 
     * @param x - V·ªã tr√≠ X trung t√¢m
     * @param y - V·ªã tr√≠ Y trung t√¢m
     */
    private createStarBurst(x: number, y: number) {
        const colors = [0xFFD700, 0xFF6B00, 0xFF0000, 0x00FF00, 0x0000FF];
        
        // T·∫°o 20 sao bay ra
        for (let i = 0; i < 20; i++) {
            const angle = (Math.PI * 2 * i) / 20;
            const distance = 100 + Math.random() * 100;
            const targetX = x + Math.cos(angle) * distance;
            const targetY = y + Math.sin(angle) * distance;
            
            const star = this.scene.add.circle(x, y, 5, colors[i % colors.length]);
            star.setDepth(999);
            
            this.scene.tweens.add({
                targets: star,
                x: targetX,
                y: targetY,
                alpha: 0,
                scale: 0,
                duration: 800 + Math.random() * 400,
                ease: 'Power2',
                onComplete: () => star.destroy(),
            });
        }
    }

    /**
     * ‚úÖ createComboEffect() - Hi·ªáu ·ª©ng combo (x√≥a nhi·ªÅu h√†ng)
     * 
     * Hi·ªÉn th·ªã text "DOUBLE!", "TRIPLE!", "TETRIS!"
     * 
     * @param linesCleared - S·ªë h√†ng x√≥a (2, 3, 4)
     */
    createComboEffect(linesCleared: number) {
        if (linesCleared < 2) return;

        const width = this.scene.cameras.main.width;
        const height = this.scene.cameras.main.height;

        const comboTexts: { [key: number]: string } = {
            2: 'DOUBLE!',
            3: 'TRIPLE!',
            4: 'TETRIS!',
        };

        const comboColors: { [key: number]: string } = {
            2: '#10b981',
            3: '#f59e0b',
            4: '#ef4444',
        };

        const text = comboTexts[linesCleared] || 'COMBO!';
        const color = comboColors[linesCleared] || '#FFD700';

        // üìù Combo text
        const comboText = this.scene.add.text(width / 2, height / 2 + 100, text, {
            fontFamily: 'Arial Black',
            fontSize: '36px',
            color: color,
            stroke: '#000000',
            strokeThickness: 6,
        }).setOrigin(0.5).setAlpha(0);

        comboText.setDepth(1000);

        // üé¨ Bounce in ‚Üí Bounce out
        this.scene.tweens.add({
            targets: comboText,
            alpha: 1,
            y: height / 2 + 80,
            duration: 200,
            ease: 'Bounce.easeOut',
            onComplete: () => {
                this.scene.time.delayedCall(800, () => {
                    this.scene.tweens.add({
                        targets: comboText,
                        alpha: 0,
                        y: height / 2 + 60,
                        duration: 300,
                        ease: 'Power2',
                        onComplete: () => comboText.destroy(),
                    });
                });
            },
        });
    }

    /**
     * ‚úÖ createGameOverEffect() - Hi·ªáu ·ª©ng game over
     * 
     * Screen shake v√† fade to black
     */
    createGameOverEffect() {
        // üì≥ Screen shake
        this.scene.cameras.main.shake(500, 0.01);
        
        // üåë Fade to dark
        this.scene.cameras.main.fade(1000, 0, 0, 0);
    }

    /**
     * ‚úÖ destroy() - D·ªçn d·∫πp
     */
    destroy() {
        this.particleEmitters.forEach(emitter => emitter.stop());
        this.particleEmitters = [];
    }
}
