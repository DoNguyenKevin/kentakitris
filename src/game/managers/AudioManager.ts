// src/game/managers/AudioManager.ts
// ======================================================
// ‚úÖ Audio Manager - Qu·∫£n l√Ω √¢m thanh trong game
// 
// Manager n√†y qu·∫£n l√Ω:
// - Sound effects (move, rotate, lock, clear, game over)
// - Background music
// - Volume controls
// - Mute/unmute
// 
// S·ª≠ d·ª•ng Phaser's Sound System
// ======================================================

import { Scene } from 'phaser';
import { Settings } from '../scenes/Settings';

/**
 * ‚úÖ AudioManager - Qu·∫£n l√Ω to√†n b·ªô √¢m thanh game
 * 
 * Singleton pattern: Ch·ªâ c√≥ 1 instance duy nh·∫•t
 * Load settings t·ª´ Settings scene
 */
export class AudioManager {
    private scene: Scene;
    
    // üéµ Music
    private bgMusic: Phaser.Sound.BaseSound | null = null;
    
    // üîä Sound effects
    private sounds: Map<string, Phaser.Sound.BaseSound> = new Map();
    
    // ‚öôÔ∏è Settings
    private settings: {
        soundEnabled: boolean;
        musicEnabled: boolean;
        soundVolume: number;
        musicVolume: number;
    };

    constructor(scene: Scene) {
        this.scene = scene;
        
        // üì• Load settings
        this.loadSettings();
        
        // üéµ Initialize sounds (v·ªõi web audio fallback)
        this.initSounds();
    }

    /**
     * ‚úÖ loadSettings() - Load audio settings
     */
    private loadSettings() {
        this.settings = Settings.getSettings();
    }

    /**
     * ‚úÖ initSounds() - Kh·ªüi t·∫°o sound effects
     * 
     * T·∫°o c√°c √¢m thanh c∆° b·∫£n s·ª≠ d·ª•ng Web Audio API
     * V√¨ kh√¥ng c√≥ file audio th·∫≠t, ta d√πng synthesized sounds
     */
    private initSounds() {
        // üéµ Background music (s·∫Ω ƒë∆∞·ª£c add sau khi c√≥ file audio)
        // Hi·ªán t·∫°i t·∫°o silent sound ƒë·ªÉ kh√¥ng b·ªã l·ªói
        
        // C√°c sound effects s·∫Ω ƒë∆∞·ª£c t·∫°o khi c·∫ßn (lazy loading)
        // ƒêi·ªÅu n√†y tr√°nh l·ªói khi ch∆∞a c√≥ audio files
    }

    /**
     * ‚úÖ playSound() - Ph√°t sound effect
     * 
     * @param soundName - T√™n sound: 'move', 'rotate', 'lock', 'clear', 'gameover'
     */
    playSound(soundName: string) {
        if (!this.settings.soundEnabled) return;
        
        // üéµ T·∫°o synthesized sound effects
        switch (soundName) {
            case 'move':
                this.playBeep(200, 0.05, 'sine');
                break;
            case 'rotate':
                this.playBeep(400, 0.08, 'sine');
                break;
            case 'lock':
                this.playBeep(150, 0.15, 'square');
                break;
            case 'clear':
                this.playMultiBeep([523, 659, 784, 1047], 0.1);
                break;
            case 'gameover':
                this.playDescendingBeep();
                break;
            case 'levelup':
                this.playAscendingBeep();
                break;
            default:
                console.warn(`Unknown sound: ${soundName}`);
        }
    }

    /**
     * ‚úÖ playBeep() - Ph√°t m·ªôt beep ƒë∆°n gi·∫£n
     * 
     * S·ª≠ d·ª•ng Web Audio API ƒë·ªÉ t·∫°o √¢m thanh t·ªïng h·ª£p
     * 
     * @param frequency - T·∫ßn s·ªë (Hz), VD: 440 = n·ªët A
     * @param duration - ƒê·ªô d√†i (gi√¢y)
     * @param type - Lo·∫°i wave: 'sine', 'square', 'sawtooth', 'triangle'
     */
    private playBeep(frequency: number, duration: number, type: OscillatorType = 'sine') {
        if (!this.settings.soundEnabled) return;
        
        try {
            const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();
            const oscillator = audioContext.createOscillator();
            const gainNode = audioContext.createGain();
            
            oscillator.connect(gainNode);
            gainNode.connect(audioContext.destination);
            
            oscillator.type = type;
            oscillator.frequency.value = frequency;
            
            // Volume envelope (fade out)
            gainNode.gain.setValueAtTime(this.settings.soundVolume * 0.3, audioContext.currentTime);
            gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + duration);
            
            oscillator.start(audioContext.currentTime);
            oscillator.stop(audioContext.currentTime + duration);
        } catch (error) {
            console.warn('Web Audio API not supported:', error);
        }
    }

    /**
     * ‚úÖ playMultiBeep() - Ph√°t nhi·ªÅu beeps li√™n ti·∫øp
     * 
     * D√πng cho clear line effect (√¢m thanh vui v·∫ª!)
     * 
     * @param frequencies - M·∫£ng t·∫ßn s·ªë [Do, Mi, Sol, Do]
     * @param noteDuration - ƒê·ªô d√†i m·ªói note
     */
    private playMultiBeep(frequencies: number[], noteDuration: number) {
        frequencies.forEach((freq, index) => {
            setTimeout(() => {
                this.playBeep(freq, noteDuration, 'sine');
            }, index * noteDuration * 1000);
        });
    }

    /**
     * ‚úÖ playAscendingBeep() - √Çm thanh tƒÉng d·∫ßn (level up!)
     */
    private playAscendingBeep() {
        const notes = [262, 330, 392, 523]; // C4, E4, G4, C5
        this.playMultiBeep(notes, 0.1);
    }

    /**
     * ‚úÖ playDescendingBeep() - √Çm thanh gi·∫£m d·∫ßn (game over...)
     */
    private playDescendingBeep() {
        const notes = [523, 392, 330, 262]; // C5, G4, E4, C4
        this.playMultiBeep(notes, 0.2);
    }

    /**
     * ‚úÖ playMusic() - Ph√°t background music
     * 
     * Loop m√£i cho ƒë·∫øn khi d·ª´ng
     */
    playMusic() {
        if (!this.settings.musicEnabled) return;
        
        // T·∫°m th·ªùi kh√¥ng c√≥ music file
        // S·∫Ω implement sau khi c√≥ audio assets
        
        // if (this.bgMusic && !this.bgMusic.isPlaying) {
        //     this.bgMusic.play({
        //         loop: true,
        //         volume: this.settings.musicVolume,
        //     });
        // }
    }

    /**
     * ‚úÖ stopMusic() - D·ª´ng background music
     */
    stopMusic() {
        if (this.bgMusic && this.bgMusic.isPlaying) {
            this.bgMusic.stop();
        }
    }

    /**
     * ‚úÖ pauseMusic() - T·∫°m d·ª´ng music (c√≥ th·ªÉ resume)
     */
    pauseMusic() {
        if (this.bgMusic && this.bgMusic.isPlaying) {
            this.bgMusic.pause();
        }
    }

    /**
     * ‚úÖ resumeMusic() - Ti·∫øp t·ª•c music
     */
    resumeMusic() {
        if (this.bgMusic && this.bgMusic.isPaused) {
            this.bgMusic.resume();
        }
    }

    /**
     * ‚úÖ updateSettings() - C·∫≠p nh·∫≠t settings
     * 
     * G·ªçi khi user thay ƒë·ªïi settings
     */
    updateSettings() {
        this.loadSettings();
        
        // C·∫≠p nh·∫≠t volume c·ªßa music n·∫øu ƒëang ch·∫°y
        if (this.bgMusic && this.bgMusic.isPlaying) {
            // Phaser's BaseSound has setVolume but TypeScript definition is incomplete
            // Cast to WebAudioSound which has the method
            (this.bgMusic as Phaser.Sound.WebAudioSound).setVolume(this.settings.musicVolume);
        }
        
        // N·∫øu t·∫Øt music ‚Üí d·ª´ng music
        if (!this.settings.musicEnabled) {
            this.stopMusic();
        }
    }

    /**
     * ‚úÖ destroy() - D·ªçn d·∫πp
     */
    destroy() {
        this.stopMusic();
        this.sounds.clear();
    }
}
