// src/game/managers/EnergyBlockManager.ts
// ======================================================
// ‚úÖ Energy Block Manager - Qu·∫£n l√Ω Energy Blocks
// 
// Class n√†y ch·ªãu tr√°ch nhi·ªám:
// - Spawn energy blocks (Hard/Impossible mode)
// - C·∫≠p nh·∫≠t v·ªã tr√≠ energy blocks (t·ª± ƒë·ªông r∆°i)
// - Ki·ªÉm tra va ch·∫°m (ch·∫°m ƒë√°y, ch·∫°m m·∫£nh ƒë√£ kh√≥a)
// - X·ª≠ l√Ω n·ªï v√† ƒë√≥ng bƒÉng chu·ªôt (Impossible mode)
// ======================================================

import { Scene } from 'phaser';
import { 
    EnergyBlock, 
    BOARD_WIDTH, 
    BOARD_HEIGHT, 
    BLOCK_SIZE,
    FROZEN_TEXT_BLINK_CYCLE 
} from '../constants/GameConstants';
import { 
    DIFFICULTY_LEVELS, 
    getDifficultyConfig 
} from '../constants/DifficultyConstants';

/**
 * ‚úÖ EnergyBlockManager - Qu·∫£n l√Ω t·∫•t c·∫£ logic v·ªÅ Energy Blocks
 * 
 * C√°ch ho·∫°t ƒë·ªông:
 * 1. Spawn energy blocks theo t·ª∑ l·ªá c·ªßa difficulty
 * 2. C·∫≠p nh·∫≠t v·ªã tr√≠ (r∆°i xu·ªëng theo th·ªùi gian)
 * 3. Ki·ªÉm tra va ch·∫°m v√† game over
 * 4. (Impossible mode) Theo d√µi chu·ªôt v√† t·∫°o hi·ªáu ·ª©ng n·ªï
 * 
 * Try it: Ch·∫°y game ·ªü Hard ho·∫∑c Impossible ƒë·ªÉ th·∫•y energy blocks!
 */
export class EnergyBlockManager {
    private scene: Scene;
    private difficulty: DIFFICULTY_LEVELS;
    private energyBlocks: EnergyBlock[];
    private isMouseFrozen: boolean;
    private frozenText: Phaser.GameObjects.Text | null;
    private boardX: number;
    private boardY: number;
    private graphics: Phaser.GameObjects.Graphics;
    private board: number[][];
    private onGameOver: () => void;
    private isGameOver: () => boolean;
    
    /**
     * ‚úÖ Constructor - Kh·ªüi t·∫°o EnergyBlockManager
     * 
     * @param scene - Phaser Scene (ƒë·ªÉ v·∫Ω v√† t·∫°o hi·ªáu ·ª©ng)
     * @param difficulty - ƒê·ªô kh√≥ game
     * @param boardX - V·ªã tr√≠ X c·ªßa board
     * @param boardY - V·ªã tr√≠ Y c·ªßa board
     * @param board - Tham chi·∫øu ƒë·∫øn board game (ƒë·ªÉ ki·ªÉm tra va ch·∫°m)
     * @param onGameOver - Callback khi game over
     * @param isGameOver - Callback ƒë·ªÉ ki·ªÉm tra game ƒë√£ over ch∆∞a
     */
    constructor(
        scene: Scene,
        difficulty: DIFFICULTY_LEVELS,
        boardX: number,
        boardY: number,
        board: number[][],
        onGameOver: () => void,
        isGameOver: () => boolean
    ) {
        this.scene = scene;
        this.difficulty = difficulty;
        this.energyBlocks = [];
        this.isMouseFrozen = false;
        this.frozenText = null;
        this.boardX = boardX;
        this.boardY = boardY;
        this.graphics = scene.add.graphics();
        this.board = board;
        this.onGameOver = onGameOver;
        this.isGameOver = isGameOver;
    }
    
    /**
     * ‚úÖ init() - Kh·ªüi t·∫°o mouse tracking (n·∫øu c·∫ßn)
     * 
     * G·ªçi h√†m n√†y trong create() c·ªßa Game scene
     */
    init() {
        this.initMouseTracking();
    }
    
    /**
     * ‚úÖ shouldSpawnEnergyBlock() - Ki·ªÉm tra c√≥ spawn energy block kh√¥ng
     * 
     * M·ª•c ti√™u: Quy·∫øt ƒë·ªãnh c√≥ t·∫°o energy block m·ªõi kh√¥ng
     * 
     * C√°ch ho·∫°t ƒë·ªông:
     * 1. Ki·ªÉm tra difficulty c√≥ h·ªó tr·ª£ energy blocks kh√¥ng
     * 2. Random theo t·ª∑ l·ªá spawnChance (VD: 0.1 = 10%)
     * 3. Tr·∫£ v·ªÅ true/false
     * 
     * V√≠ d·ª•:
     * - Hard mode: 10% c∆° h·ªôi ‚Üí Math.random() < 0.1
     * - Impossible: 20% c∆° h·ªôi ‚Üí Math.random() < 0.2
     * 
     * ‚ùì C√¢u h·ªèi: T·∫°i sao d√πng Math.random()?
     * üí° Tr·∫£ l·ªùi: ƒê·ªÉ t·∫°o s·ª± ng·∫´u nhi√™n! Kh√¥ng bi·∫øt tr∆∞·ªõc khi n√†o xu·∫•t hi·ªán
     *            ‚Üí Game th√∫ v·ªã h∆°n!
     */
    shouldSpawnEnergyBlock(): boolean {
        const config = getDifficultyConfig(this.difficulty);
        
        // ‚ùå ƒê·ªô kh√≥ n√†y kh√¥ng c√≥ energy blocks
        if (!config.hasEnergyBlocks || !config.energyBlockConfig) {
            return false;
        }
        
        // üé≤ Random theo t·ª∑ l·ªá spawnChance
        return Math.random() < config.energyBlockConfig.spawnChance;
    }
    
    /**
     * ‚úÖ createEnergyBlock() - T·∫°o energy block m·ªõi
     * 
     * M·ª•c ti√™u: T·∫°o 1 energy block v·ªõi c·∫•u h√¨nh t·ª´ difficulty
     * 
     * C√°ch ho·∫°t ƒë·ªông:
     * 1. L·∫•y config t·ª´ difficulty
     * 2. Random v·ªã tr√≠ X (0 ƒë·∫øn BOARD_WIDTH-1)
     * 3. V·ªã tr√≠ Y = 0 (spawn ·ªü tr√™n c√πng)
     * 4. Copy c√°c thu·ªôc t√≠nh t·ª´ energyBlockConfig
     * 
     * Tr·∫£ v·ªÅ: EnergyBlock object ho·∫∑c null
     * 
     * ‚ùì C√¢u h·ªèi: T·∫°i sao spawn ·ªü y = 0?
     * üí° Tr·∫£ l·ªùi: Gi·ªëng m·∫£nh Tetris, energy block c≈©ng r∆°i t·ª´ tr√™n xu·ªëng!
     */
    createEnergyBlock(): EnergyBlock | null {
        const config = getDifficultyConfig(this.difficulty);
        
        if (!config.hasEnergyBlocks || !config.energyBlockConfig) {
            return null;
        }
        
        const energyConfig = config.energyBlockConfig;
        
        return {
            x: Math.floor(Math.random() * BOARD_WIDTH), // Random c·ªôt
            y: 0,                                       // Tr√™n c√πng
            color: energyConfig.color,                  // M√†u theo config
            dropSpeed: energyConfig.dropSpeed,          // T·ªëc ƒë·ªô r∆°i
            lastDropTime: Date.now(),                   // Timestamp hi·ªán t·∫°i
            canExplode: energyConfig.canExplode,        // C√≥ n·ªï kh√¥ng
            explosionDistance: energyConfig.explosionDistance,
            freezeDuration: energyConfig.freezeDuration
        };
    }
    
    /**
     * ‚úÖ trySpawnEnergyBlock() - Th·ª≠ spawn energy block
     * 
     * M·ª•c ti√™u: G·ªçi khi spawn m·∫£nh m·ªõi, c√≥ th·ªÉ t·∫°o energy block
     * 
     * C√°ch ho·∫°t ƒë·ªông:
     * 1. G·ªçi shouldSpawnEnergyBlock() ƒë·ªÉ ki·ªÉm tra
     * 2. N·∫øu true ‚Üí t·∫°o v√† th√™m v√†o danh s√°ch
     * 
     * Try it: ƒê∆∞·ª£c g·ªçi trong spawnPiece()
     */
    trySpawnEnergyBlock() {
        if (this.shouldSpawnEnergyBlock()) {
            const newBlock = this.createEnergyBlock();
            if (newBlock) {
                this.energyBlocks.push(newBlock);
            }
        }
    }
    
    /**
     * ‚úÖ update() - C·∫≠p nh·∫≠t t·∫•t c·∫£ energy blocks
     * 
     * M·ª•c ti√™u: L√†m energy blocks t·ª± ƒë·ªông r∆°i xu·ªëng
     * 
     * C√°ch ho·∫°t ƒë·ªông:
     * 1. Duy·ªát qua t·∫•t c·∫£ energy blocks (t·ª´ cu·ªëi l√™n ƒë·∫ßu)
     * 2. Ki·ªÉm tra ƒë√£ ƒë·∫øn l√∫c r∆°i ch∆∞a (so s√°nh timestamp)
     * 3. N·∫øu ƒë·∫øn l√∫c ‚Üí y++, c·∫≠p nh·∫≠t lastDropTime
     * 4. Ki·ªÉm tra ch·∫°m ƒë√°y ho·∫∑c va ch·∫°m ‚Üí Game Over!
     * 
     * ‚ùì C√¢u h·ªèi: T·∫°i sao duy·ªát t·ª´ cu·ªëi l√™n?
     * üí° Tr·∫£ l·ªùi: ƒê·ªÉ c√≥ th·ªÉ x√≥a ph·∫ßn t·ª≠ trong m·∫£ng m·ªôt c√°ch an to√†n!
     *            N·∫øu duy·ªát t·ª´ ƒë·∫ßu, x√≥a 1 ph·∫ßn t·ª≠ ‚Üí index b·ªã l·ªách!
     */
    update() {
        const currentTime = Date.now();
        
        // Duy·ªát ng∆∞·ª£c ƒë·ªÉ c√≥ th·ªÉ x√≥a an to√†n
        for (let i = this.energyBlocks.length - 1; i >= 0; i--) {
            const block = this.energyBlocks[i];
            
            // ‚è∞ Ki·ªÉm tra ƒë√£ ƒë·∫øn l√∫c r∆°i ch∆∞a
            if (currentTime - block.lastDropTime >= block.dropSpeed) {
                block.y++; // R∆°i xu·ªëng 1 √¥
                block.lastDropTime = currentTime;
                
                // ‚ùå Ch·∫°m ƒë√°y ‚Üí Game Over!
                if (block.y >= BOARD_HEIGHT) {
                    this.energyBlocks.splice(i, 1);
                    this.onGameOver();
                    return;
                }
                
                // ‚ùå Va ch·∫°m v·ªõi m·∫£nh ƒë√£ kh√≥a ‚Üí Game Over!
                if (this.board[block.y] && this.board[block.y][block.x] !== 0) {
                    this.energyBlocks.splice(i, 1);
                    this.onGameOver();
                    return;
                }
            }
        }
    }
    
    /**
     * ‚úÖ render() - V·∫Ω t·∫•t c·∫£ energy blocks
     * 
     * M·ª•c ti√™u: Hi·ªÉn th·ªã energy blocks l√™n m√†n h√¨nh
     * 
     * C√°ch ho·∫°t ƒë·ªông:
     * 1. Clear graphics c≈©
     * 2. Duy·ªát qua t·∫•t c·∫£ energy blocks
     * 3. V·∫Ω m·ªói block v·ªõi hi·ªáu ·ª©ng ƒë·∫∑c bi·ªát
     * 4. N·∫øu canExplode ‚Üí th√™m d·∫•u c·∫£nh b√°o
     */
    render() {
        // Clear graphics c≈©
        this.graphics.clear();
        
        // ‚ö° Draw energy blocks
        for (const block of this.energyBlocks) {
            const px = this.boardX + block.x * BLOCK_SIZE;
            const py = this.boardY + block.y * BLOCK_SIZE;
            
            // üé® V·∫Ω energy block v·ªõi hi·ªáu ·ª©ng ƒë·∫∑c bi·ªát
            this.graphics.fillStyle(block.color, 0.8);
            this.graphics.fillRect(px + 1, py + 1, BLOCK_SIZE - 2, BLOCK_SIZE - 2);
            
            // ‚ú® Vi·ªÅn s√°ng (glow effect)
            this.graphics.lineStyle(2, 0xFFFFFF, 0.6);
            this.graphics.strokeRect(px + 2, py + 2, BLOCK_SIZE - 4, BLOCK_SIZE - 4);
            
            // üí• N·∫øu c√≥ th·ªÉ n·ªï, th√™m d·∫•u c·∫£nh b√°o
            if (block.canExplode) {
                // V·∫Ω d·∫•u X nh·ªè ·ªü gi·ªØa
                const centerX = px + BLOCK_SIZE / 2;
                const centerY = py + BLOCK_SIZE / 2;
                const size = 4;
                
                this.graphics.lineStyle(2, 0xFF0000, 1);
                this.graphics.beginPath();
                this.graphics.moveTo(centerX - size, centerY - size);
                this.graphics.lineTo(centerX + size, centerY + size);
                this.graphics.moveTo(centerX + size, centerY - size);
                this.graphics.lineTo(centerX - size, centerY + size);
                this.graphics.strokePath();
            }
        }
    }
    
    /**
     * ‚úÖ initMouseTracking() - Kh·ªüi t·∫°o theo d√µi chu·ªôt
     * 
     * M·ª•c ti√™u: Theo d√µi v·ªã tr√≠ chu·ªôt ƒë·ªÉ ki·ªÉm tra kho·∫£ng c√°ch v·ªõi energy blocks
     *           (Ch·ªâ ho·∫°t ƒë·ªông ·ªü Impossible mode)
     * 
     * C√°ch ho·∫°t ƒë·ªông:
     * 1. Ki·ªÉm tra difficulty c√≥ ph·∫£i Impossible kh√¥ng
     * 2. L·∫Øng nghe s·ª± ki·ªán pointermove (di chuy·ªÉn chu·ªôt)
     * 3. G·ªçi checkMouseProximity() m·ªói khi chu·ªôt di chuy·ªÉn
     * 
     * ‚ùì C√¢u h·ªèi: T·∫°i sao ch·ªâ Impossible mode?
     * üí° Tr·∫£ l·ªùi: ƒê√¢y l√† t√≠nh nƒÉng c·ª±c kh√≥! Hard mode ch∆∞a c√≥ n·ªï.
     */
    private initMouseTracking() {
        const config = getDifficultyConfig(this.difficulty);
        
        // ‚ùå Kh√¥ng ph·∫£i Impossible ho·∫∑c kh√¥ng c√≥ energy blocks
        if (this.difficulty !== DIFFICULTY_LEVELS.IMPOSSIBLE || 
            !config.hasEnergyBlocks || 
            !config.energyBlockConfig?.canExplode) {
            return;
        }
        
        // üñ±Ô∏è L·∫Øng nghe s·ª± ki·ªán di chuy·ªÉn chu·ªôt
        this.scene.input.on('pointermove', (pointer: Phaser.Input.Pointer) => {
            // ‚ùå N·∫øu chu·ªôt frozen ho·∫∑c game over ‚Üí kh√¥ng l√†m g√¨
            if (this.isMouseFrozen || this.isGameOver()) return;
            this.checkMouseProximity(pointer.x, pointer.y);
        });
    }
    
    /**
     * ‚úÖ checkMouseProximity() - Ki·ªÉm tra chu·ªôt c√≥ g·∫ßn energy block kh√¥ng
     * 
     * M·ª•c ti√™u: T√≠nh kho·∫£ng c√°ch gi·ªØa chu·ªôt v√† c√°c energy blocks
     *           N·∫øu qu√° g·∫ßn ‚Üí N·ªî!
     * 
     * C√°ch ho·∫°t ƒë·ªông:
     * 1. Duy·ªát qua t·∫•t c·∫£ energy blocks
     * 2. T√≠nh v·ªã tr√≠ pixel c·ªßa energy block
     * 3. T√≠nh kho·∫£ng c√°ch t·ª´ chu·ªôt ƒë·∫øn block (c√¥ng th·ª©c Pythagoras)
     * 4. N·∫øu kho·∫£ng c√°ch < explosionDistance ‚Üí G·ªçi explodeEnergyBlock()
     * 
     * C√¥ng th·ª©c kho·∫£ng c√°ch:
     * distance = ‚àö((x2-x1)¬≤ + (y2-y1)¬≤)
     * 
     * ‚ùì C√¢u h·ªèi: T·∫°i sao d√πng c√¥ng th·ª©c Pythagoras?
     * üí° Tr·∫£ l·ªùi: ƒê·ªÉ t√≠nh kho·∫£ng c√°ch th·∫≥ng (ƒë∆∞·ªùng ch√©o) gi·ªØa 2 ƒëi·ªÉm!
     *            Gi·ªëng ƒë·ªãnh l√Ω Pythagoras: a¬≤ + b¬≤ = c¬≤
     */
    private checkMouseProximity(mouseX: number, mouseY: number) {
        const config = getDifficultyConfig(this.difficulty);
        
        if (!config.energyBlockConfig?.canExplode) return;
        
        // Duy·ªát ng∆∞·ª£c ƒë·ªÉ c√≥ th·ªÉ x√≥a an to√†n
        for (let i = this.energyBlocks.length - 1; i >= 0; i--) {
            const block = this.energyBlocks[i];
            
            // üìç T√≠nh v·ªã tr√≠ pixel c·ªßa energy block (gi·ªØa √¥)
            const blockPixelX = this.boardX + block.x * BLOCK_SIZE + BLOCK_SIZE / 2;
            const blockPixelY = this.boardY + block.y * BLOCK_SIZE + BLOCK_SIZE / 2;
            
            // üìè T√≠nh kho·∫£ng c√°ch (Pythagoras: ‚àö(Œîx¬≤ + Œîy¬≤))
            const distance = Math.sqrt(
                Math.pow(mouseX - blockPixelX, 2) + 
                Math.pow(mouseY - blockPixelY, 2)
            );
            
            // üí• Chu·ªôt qu√° g·∫ßn ‚Üí N·ªî!
            if (distance < (block.explosionDistance || 0)) {
                this.explodeEnergyBlock(i);
                return;
            }
        }
    }
    
    /**
     * ‚úÖ explodeEnergyBlock() - L√†m n·ªï energy block
     * 
     * M·ª•c ti√™u: Hi·ªáu ·ª©ng n·ªï + ƒë√≥ng bƒÉng chu·ªôt
     * 
     * C√°ch ho·∫°t ƒë·ªông:
     * 1. L·∫•y th√¥ng tin block
     * 2. T·∫°o hi·ªáu ·ª©ng n·ªï (animation)
     * 3. X√≥a block kh·ªèi danh s√°ch
     * 4. ƒê√≥ng bƒÉng chu·ªôt theo freezeDuration
     * 
     * Try it: Ch·∫°y Impossible mode, di chuy·ªÉn chu·ªôt g·∫ßn energy block!
     * 
     * ‚ùì C√¢u h·ªèi: T·∫°i sao ph·∫£i ƒë√≥ng bƒÉng chu·ªôt?
     * üí° Tr·∫£ l·ªùi: ƒê·ªÉ tƒÉng ƒë·ªô kh√≥! Khi chu·ªôt ƒë√≥ng bƒÉng, kh√¥ng th·ªÉ tr√°nh
     *            c√°c energy block kh√°c ‚Üí R·∫•t nguy hi·ªÉm!
     */
    private explodeEnergyBlock(index: number) {
        const block = this.energyBlocks[index];
        if (!block) return;
        
        // üí• T·∫°o hi·ªáu ·ª©ng n·ªï (v·∫Ω v√≤ng tr√≤n m·ªü r·ªông)
        const explosionX = this.boardX + block.x * BLOCK_SIZE + BLOCK_SIZE / 2;
        const explosionY = this.boardY + block.y * BLOCK_SIZE + BLOCK_SIZE / 2;
        
        // V·∫Ω hi·ªáu ·ª©ng n·ªï v·ªõi graphics
        const explosionGraphics = this.scene.add.graphics();
        
        // üé® Animation: V√≤ng tr√≤n m·ªü r·ªông d·∫ßn
        const animTarget = { radius: 5 };
        this.scene.tweens.add({
            targets: animTarget,
            radius: 50,
            duration: 500,
            ease: 'Power2',
            onUpdate: (tween) => {
                explosionGraphics.clear();
                const currentRadius = animTarget.radius;
                const alpha = 1 - tween.progress; // M·ªù d·∫ßn
                
                // V·∫Ω 3 v√≤ng tr√≤n (hi·ªáu ·ª©ng s√≥ng)
                explosionGraphics.lineStyle(3, block.color, alpha);
                explosionGraphics.strokeCircle(explosionX, explosionY, currentRadius);
                explosionGraphics.lineStyle(2, 0xFFFFFF, alpha * 0.5);
                explosionGraphics.strokeCircle(explosionX, explosionY, currentRadius * 0.7);
            },
            onComplete: () => {
                explosionGraphics.destroy(); // X√≥a graphics sau khi xong
            }
        });
        
        // üîä C√≥ th·ªÉ th√™m sound effect (n·∫øu c√≥)
        // this.scene.sound.play('explosion');
        
        // ‚ùå X√≥a energy block
        this.energyBlocks.splice(index, 1);
        
        // üßä ƒê√≥ng bƒÉng chu·ªôt
        if (block.freezeDuration) {
            this.freezeMouse(block.freezeDuration);
        }
    }
    
    /**
     * ‚úÖ freezeMouse() - ƒê√≥ng bƒÉng chu·ªôt
     * 
     * M·ª•c ti√™u: NgƒÉn ng∆∞·ªùi ch∆°i di chuy·ªÉn chu·ªôt trong 1 kho·∫£ng th·ªùi gian
     * 
     * C√°ch ho·∫°t ƒë·ªông:
     * 1. ƒê·∫∑t isMouseFrozen = true
     * 2. Hi·ªÉn th·ªã text "üßä MOUSE FROZEN! üßä"
     * 3. Sau duration ‚Üí B·ªè ƒë√≥ng bƒÉng, x√≥a text
     * 
     * ‚ùì C√¢u h·ªèi: Ng∆∞·ªùi ch∆°i c√≥ th·ªÉ tr√°nh b·ªã freeze kh√¥ng?
     * üí° Tr·∫£ l·ªùi: C√ì! Gi·ªØ chu·ªôt xa energy blocks l√† ƒë∆∞·ª£c!
     *            ƒê√≥ l√† k·ªπ nƒÉng c·ªßa Impossible mode!
     */
    private freezeMouse(duration: number) {
        if (this.isMouseFrozen) return; // ƒê√£ b·ªã ƒë√≥ng bƒÉng r·ªìi
        
        this.isMouseFrozen = true;
        
        // üìù Hi·ªÉn th·ªã text "MOUSE FROZEN"
        this.frozenText = this.scene.add.text(512, 300, 'üßä MOUSE FROZEN! üßä', {
            fontFamily: 'Arial Black',
            fontSize: '32px',
            color: '#00FFFF',
            stroke: '#000000',
            strokeThickness: 6,
        }).setOrigin(0.5);
        
        // ‚ú® Hi·ªáu ·ª©ng nh·∫•p nh√°y
        this.scene.tweens.add({
            targets: this.frozenText,
            alpha: 0.3,
            duration: 300,
            yoyo: true,
            repeat: Math.floor(duration / FROZEN_TEXT_BLINK_CYCLE) // Nh·∫•p nh√°y cho ƒë·∫øn h·∫øt th·ªùi gian
        });
        
        // ‚è∞ B·ªè ƒë√≥ng bƒÉng sau duration
        this.scene.time.delayedCall(duration, () => {
            this.isMouseFrozen = false;
            if (this.frozenText) {
                this.frozenText.destroy();
                this.frozenText = null;
            }
        });
    }
    
    /**
     * ‚úÖ getMouseFrozenState() - L·∫•y tr·∫°ng th√°i ƒë√≥ng bƒÉng chu·ªôt
     * 
     * @returns true n·∫øu chu·ªôt ƒëang b·ªã ƒë√≥ng bƒÉng
     */
    getMouseFrozenState(): boolean {
        return this.isMouseFrozen;
    }
    
    /**
     * ‚úÖ destroy() - D·ªçn d·∫πp khi scene k·∫øt th√∫c
     */
    destroy() {
        this.graphics.destroy();
        if (this.frozenText) {
            this.frozenText.destroy();
        }
    }
}
