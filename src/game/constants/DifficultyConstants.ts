// src/game/constants/DifficultyConstants.ts
// ======================================================
// ‚úÖ File n√†y qu·∫£n l√Ω C·∫§U H√åNH ƒê·ªò KH√ì c·ªßa game
// 
// ƒê·ªô kh√≥ ·∫£nh h∆∞·ªüng ƒë·∫øn:
// - T·ªëc ƒë·ªô r∆°i c·ªßa m·∫£nh (nhanh hay ch·∫≠m)
// - ƒêi·ªÉm nh√¢n ƒë∆∞·ª£c (c√†ng kh√≥ c√†ng nhi·ªÅu ƒëi·ªÉm)
// 
// ‚ùì C√¢u h·ªèi: T·∫°i sao c·∫ßn nhi·ªÅu ƒë·ªô kh√≥?
// üí° Tr·∫£ l·ªùi: ƒê·ªÉ ng∆∞·ªùi ch∆°i m·ªõi v√† cao th·ªß ƒë·ªÅu th·∫•y vui!
//            Ng∆∞·ªùi m·ªõi ‚Üí Easy (ch·∫≠m, d·ªÖ ch∆°i)
//            Cao th·ªß ‚Üí Impossible (nhanh, th·ª≠ th√°ch)
// ======================================================

/**
 * ‚úÖ C√°c m·ª©c ƒë·ªô kh√≥ c√≥ trong game
 * 
 * 4 m·ª©c ƒë·ªô t·ª´ d·ªÖ ƒë·∫øn c·ª±c kh√≥:
 * - EASY: Cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu
 * - NORMAL: T·ªëc ƒë·ªô chu·∫©n c·ªßa Tetris
 * - HARD: Cho ng∆∞·ªùi c√≥ kinh nghi·ªám
 * - IMPOSSIBLE: Th·ª≠ th√°ch cao th·ªß!
 */
export enum DIFFICULTY_LEVELS {
    EASY = 'easy',
    NORMAL = 'normal',
    HARD = 'hard',
    IMPOSSIBLE = 'impossible'
}

/**
 * ‚úÖ C·∫•u h√¨nh cho t·ª´ng ƒë·ªô kh√≥
 * 
 * Interface = Khu√¥n m·∫´u (ƒë·ªãnh nghƒ©a c·∫•u tr√∫c d·ªØ li·ªáu)
 */
export interface DifficultyConfig {
    name: string;                   // T√™n hi·ªÉn th·ªã (VD: "D·ªÖ (Easy)")
    displayName: string;            // T√™n ng·∫Øn g·ªçn
    dropSpeedMultiplier: number;    // H·ªá s·ªë nh√¢n t·ªëc ƒë·ªô r∆°i
    scoreMultiplier: number;        // H·ªá s·ªë nh√¢n ƒëi·ªÉm s·ªë
    color: string;                  // M√†u hi·ªÉn th·ªã
    description: string;            // M√¥ t·∫£ ƒë·ªô kh√≥
}

/**
 * ‚úÖ C·∫•u h√¨nh chi ti·∫øt cho t·ª´ng ƒë·ªô kh√≥
 * 
 * dropSpeedMultiplier gi·∫£i th√≠ch:
 * - 1.5 = Ch·∫≠m h∆°n 1.5 l·∫ßn (Easy)
 * - 1.0 = T·ªëc ƒë·ªô chu·∫©n (Normal)
 * - 0.8 = Nhanh h∆°n 1.25 l·∫ßn (Hard)
 * - 0.6 = Nhanh h∆°n 1.67 l·∫ßn (Impossible)
 * 
 * C√¥ng th·ª©c: dropDelay = (1000ms * dropSpeedMultiplier) / level
 * 
 * V√≠ d·ª• Level 1:
 * - Easy: 1000 * 1.5 / 1 = 1500ms (r∆°i m·ªói 1.5 gi√¢y)
 * - Normal: 1000 * 1.0 / 1 = 1000ms (r∆°i m·ªói 1 gi√¢y)
 * - Hard: 1000 * 0.8 / 1 = 800ms (r∆°i m·ªói 0.8 gi√¢y)
 * - Impossible: 1000 * 0.6 / 1 = 600ms (r∆°i m·ªói 0.6 gi√¢y)
 * 
 * ‚ùì C√¢u h·ªèi: T·∫°i sao level c√†ng cao, dropDelay c√†ng nh·ªè?
 * üí° Tr·∫£ l·ªùi: V√¨ chia cho level! Level 2 ‚Üí delay gi·∫£m 1/2
 *            ‚Üí M·∫£nh r∆°i nhanh g·∫•p ƒë√¥i!
 */
export const DIFFICULTY_CONFIG: Record<DIFFICULTY_LEVELS, DifficultyConfig> = {
    [DIFFICULTY_LEVELS.EASY]: {
        name: 'D·ªÖ (Easy)',
        displayName: 'Easy',
        dropSpeedMultiplier: 1.5,        // Ch·∫≠m h∆°n 50%
        scoreMultiplier: 0.8,            // ƒêi·ªÉm √≠t h∆°n 20%
        color: '#00FF88',                // M√†u xanh l√° nh·∫°t
        description: 'Cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu - M·∫£nh r∆°i ch·∫≠m'
    },
    [DIFFICULTY_LEVELS.NORMAL]: {
        name: 'B√¨nh th∆∞·ªùng (Normal)',
        displayName: 'Normal',
        dropSpeedMultiplier: 1.0,        // T·ªëc ƒë·ªô chu·∫©n
        scoreMultiplier: 1.0,            // ƒêi·ªÉm chu·∫©n
        color: '#FFD700',                // M√†u v√†ng
        description: 'ƒê·ªô kh√≥ chu·∫©n c·ªßa Tetris'
    },
    [DIFFICULTY_LEVELS.HARD]: {
        name: 'Kh√≥ (Hard)',
        displayName: 'Hard',
        dropSpeedMultiplier: 0.8,        // Nhanh h∆°n 25%
        scoreMultiplier: 1.3,            // ƒêi·ªÉm nhi·ªÅu h∆°n 30%
        color: '#FF8E0D',                // M√†u cam
        description: 'Th·ª≠ th√°ch - M·∫£nh r∆°i nhanh h∆°n'
    },
    [DIFFICULTY_LEVELS.IMPOSSIBLE]: {
        name: 'Impossible',
        displayName: 'Impossible',
        dropSpeedMultiplier: 0.6,        // Nhanh h∆°n 67%
        scoreMultiplier: 1.5,            // ƒêi·ªÉm nhi·ªÅu h∆°n 50%
        color: '#FF0D72',                // M√†u h·ªìng s√°ng
        description: 'C·ª±c kh√≥ - Ch·ªâ d√†nh cho cao th·ªß!'
    }
};

/**
 * ‚úÖ H·∫±ng s·ªë m·∫∑c ƒë·ªãnh
 */
export const DEFAULT_DIFFICULTY = DIFFICULTY_LEVELS.NORMAL;
export const DIFFICULTY_STORAGE_KEY = 'kentakitris_difficulty'; // Key l∆∞u trong localStorage

/**
 * ‚úÖ H√†m l·∫•y c·∫•u h√¨nh ƒë·ªô kh√≥
 * 
 * M·ª•c ti√™u: L·∫•y th√¥ng tin chi ti·∫øt c·ªßa 1 ƒë·ªô kh√≥
 * 
 * Tham s·ªë:
 * - difficulty: ƒê·ªô kh√≥ c·∫ßn l·∫•y (VD: DIFFICULTY_LEVELS.EASY)
 * 
 * Tr·∫£ v·ªÅ: DifficultyConfig (object ch·ª©a name, multiplier, etc.)
 * 
 * V√≠ d·ª•:
 * getDifficultyConfig(DIFFICULTY_LEVELS.EASY)
 * ‚Üí { name: "D·ªÖ (Easy)", dropSpeedMultiplier: 1.5, ... }
 * 
 * Try it: console.log(getDifficultyConfig(DIFFICULTY_LEVELS.HARD))
 */
export function getDifficultyConfig(difficulty: DIFFICULTY_LEVELS): DifficultyConfig {
    return DIFFICULTY_CONFIG[difficulty];
}

/**
 * ‚úÖ H√†m t√≠nh dropDelay d·ª±a tr√™n ƒë·ªô kh√≥ v√† level
 * 
 * M·ª•c ti√™u: T√≠nh th·ªùi gian m·∫£nh t·ª± ƒë·ªông r∆°i (milliseconds)
 * 
 * C√¥ng th·ª©c: (1000ms * dropSpeedMultiplier) / level
 * 
 * Tham s·ªë:
 * - difficulty: ƒê·ªô kh√≥ ƒë√£ ch·ªçn
 * - level: Level hi·ªán t·∫°i (1, 2, 3...)
 * 
 * Tr·∫£ v·ªÅ: Th·ªùi gian delay (ms)
 * 
 * V√≠ d·ª•:
 * calculateDropDelay(DIFFICULTY_LEVELS.EASY, 1) ‚Üí 1500ms
 * calculateDropDelay(DIFFICULTY_LEVELS.HARD, 2) ‚Üí 400ms
 * 
 * ‚ùì C√¢u h·ªèi: T·∫°i sao chia cho level?
 * üí° Tr·∫£ l·ªùi: ƒê·ªÉ game c√†ng ch∆°i c√†ng kh√≥!
 *            Level 1: R∆°i ch·∫≠m (d·ªÖ ch∆°i)
 *            Level 10: R∆°i r·∫•t nhanh (kh√≥ ch∆°i)
 */
export function calculateDropDelay(difficulty: DIFFICULTY_LEVELS, level: number): number {
    const config = getDifficultyConfig(difficulty);
    const baseDelay = 1000; // 1000ms = 1 gi√¢y
    const delay = (baseDelay * config.dropSpeedMultiplier) / level;
    
    // ‚úÖ ƒê·∫£m b·∫£o delay kh√¥ng qu√° nhanh (t·ªëi thi·ªÉu 50ms)
    // V√¨ n·∫øu qu√° nhanh, ng∆∞·ªùi ch∆°i kh√¥ng k·ªãp nh√¨n!
    return Math.max(50, delay);
}

/**
 * ‚úÖ H√†m t√≠nh ƒëi·ªÉm d·ª±a tr√™n ƒë·ªô kh√≥
 * 
 * M·ª•c ti√™u: Nh√¢n ƒëi·ªÉm s·ªë theo ƒë·ªô kh√≥
 * 
 * Tham s·ªë:
 * - baseScore: ƒêi·ªÉm g·ªëc (kh√¥ng nh√¢n)
 * - difficulty: ƒê·ªô kh√≥ ƒë√£ ch·ªçn
 * 
 * Tr·∫£ v·ªÅ: ƒêi·ªÉm sau khi nh√¢n
 * 
 * V√≠ d·ª•:
 * calculateScore(100, DIFFICULTY_LEVELS.EASY) ‚Üí 80
 * calculateScore(100, DIFFICULTY_LEVELS.IMPOSSIBLE) ‚Üí 150
 * 
 * ‚ùì C√¢u h·ªèi: T·∫°i sao Easy √≠t ƒëi·ªÉm h∆°n?
 * üí° Tr·∫£ l·ªùi: V√¨ d·ªÖ ch∆°i h∆°n! Kh√≥ h∆°n = x·ª©ng ƒë√°ng nhi·ªÅu ƒëi·ªÉm h∆°n!
 */
export function calculateScore(baseScore: number, difficulty: DIFFICULTY_LEVELS): number {
    const config = getDifficultyConfig(difficulty);
    return Math.floor(baseScore * config.scoreMultiplier);
}

// ‚ùì Th·ª≠ nghi·ªám:
// Try it: Thay ƒë·ªïi c√°c con s·ªë multiplier v√† xem game thay ƒë·ªïi th·∫ø n√†o!
// - TƒÉng dropSpeedMultiplier c·ªßa EASY l√™n 2.0 ‚Üí Ch·∫≠m g·∫•p ƒë√¥i!
// - Gi·∫£m dropSpeedMultiplier c·ªßa IMPOSSIBLE xu·ªëng 0.3 ‚Üí C·ª±c nhanh!
