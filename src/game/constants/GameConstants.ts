// src/game/constants/GameConstants.ts
// ======================================================
// ‚úÖ H·∫±ng s·ªë game (Game Constants)
// Nh·ªØng con s·ªë n√†y ƒë·ªãnh nghƒ©a k√≠ch th∆∞·ªõc v√† quy t·∫Øc c·ªßa game
// ======================================================

// üìè K√≠ch th∆∞·ªõc board
export const BOARD_WIDTH = 10;  // 10 c·ªôt (chu·∫©n Tetris g·ªëc t·ª´ 1984)
export const BOARD_HEIGHT = 20; // 20 h√†ng
export const BLOCK_SIZE = 30;   // M·ªói √¥ vu√¥ng = 30x30 pixels

// üìç Board position - V·ªã tr√≠ board tr√™n m√†n h√¨nh
export const BOARD_X = 200;  // V·ªã tr√≠ X c·ªßa board (pixels)
export const BOARD_Y = 50;   // V·ªã tr√≠ Y c·ªßa board (pixels)

// ‚ö° Energy Block constants
export const FROZEN_TEXT_BLINK_CYCLE = 600; // ms - Chu k·ª≥ nh·∫•p nh√°y c·ªßa text frozen (300ms * 2)

// ‚ùì Th·ª≠ nghi·ªám: Thay BOARD_WIDTH = 15 ‚Üí Board r·ªông h∆°n!
// ‚ùì Th·ª≠ nghi·ªám: Thay BLOCK_SIZE = 40 ‚Üí √î to h∆°n!

// üé® M√†u s·∫Øc cho c√°c m·∫£nh Tetris
// ======================================================
// M·ªói lo·∫°i m·∫£nh c√≥ 1 m√†u ri√™ng (theo chu·∫©n Tetris hi·ªán ƒë·∫°i)
// ‚úÖ ƒê√£ c·∫≠p nh·∫≠t ƒë·ªÉ kh·ªõp v·ªõi theme c·ªßa game JS c≈©
export const COLORS = [
    0x000000, // 0 = Tr·ªëng (Empty) - M√†u ƒëen
    0xFF0D72, // 1 = T - M√†u h·ªìng s√°ng (Bright Pink)
    0x0DC2FF, // 2 = I - M√†u xanh n∆∞·ªõc bi·ªÉn (Cyan)
    0x0DFF72, // 3 = J - M√†u xanh l√° chanh (Lime Green)
    0xFF8E0D, // 4 = L - M√†u cam (Orange)
    0xFFE100, // 5 = O - M√†u v√†ng (Yellow)
    0xFF1A0D, // 6 = S - M√†u ƒë·ªè s√°ng (Bright Red)
    0x5833FF, // 7 = Z - M√†u t√≠m xanh (Blue Violet)
];

// üí° L∆∞u √Ω: M√†u trong Phaser d√πng h·ªá 16 (hex)
//          V√≠ d·ª•: 0xFF0D72 = m√†u h·ªìng s√°ng
//          C√°c m√†u n√†y kh·ªõp v·ªõi game JS c≈© trong src/index.css
//          (CSS classes: .color-1 ƒë·∫øn .color-7, d√≤ng 94-100)

// üß© H√¨nh d·∫°ng c√°c m·∫£nh Tetris (Shapes)
// ======================================================
// 7 lo·∫°i m·∫£nh trong Tetris, m·ªói lo·∫°i c√≥ h√¨nh d·∫°ng ri√™ng
// D√πng m·∫£ng 2 chi·ªÅu ƒë·ªÉ bi·ªÉu di·ªÖn: 1 = c√≥ √¥, 0 = tr·ªëng

export const SHAPES = [
    // T - H√¨nh ch·ªØ T
    [[0, 1, 0], 
     [1, 1, 1], 
     [0, 0, 0]],
    
    // I - H√¨nh thanh d√†i
    [[0, 0, 0, 0], 
     [1, 1, 1, 1], 
     [0, 0, 0, 0], 
     [0, 0, 0, 0]],
    
    // J - H√¨nh ch·ªØ J
    [[1, 0, 0], 
     [1, 1, 1], 
     [0, 0, 0]],
    
    // L - H√¨nh ch·ªØ L
    [[0, 0, 1], 
     [1, 1, 1], 
     [0, 0, 0]],
    
    // O - H√¨nh vu√¥ng
    [[1, 1], 
     [1, 1]],
    
    // S - H√¨nh ch·ªØ S
    [[0, 1, 1], 
     [1, 1, 0], 
     [0, 0, 0]],
    
    // Z - H√¨nh ch·ªØ Z
    [[1, 1, 0], 
     [0, 1, 1], 
     [0, 0, 0]],
];

// ‚ùì C√¢u h·ªèi: T·∫°i sao d√πng m·∫£ng 2 chi·ªÅu?
// üí° Tr·∫£ l·ªùi: V√¨ m·∫£nh Tetris c√≥ h√†ng v√† c·ªôt, gi·ªëng b√†n c·ªù!
//            [[1,0], [1,1]] = √¥ (0,0) c√≥ 1, √¥ (0,1) c√≥ 0...

// üéÆ C·∫•u tr√∫c d·ªØ li·ªáu c·ªßa 1 m·∫£nh Tetris (Piece)
// ======================================================
export interface Piece {
    shape: number[][];  // H√¨nh d·∫°ng (m·∫£ng 2D: 1=c√≥ √¥, 0=tr·ªëng)
    color: number;      // M√†u s·∫Øc (1-7, t∆∞∆°ng ·ª©ng COLORS)
    x: number;          // V·ªã tr√≠ c·ªôt tr√™n board (0 = c·ªôt tr√°i)
    y: number;          // V·ªã tr√≠ h√†ng tr√™n board (0 = h√†ng tr√™n)
}

// V√≠ d·ª•: { shape: [[1,1],[1,1]], color: 5, x: 4, y: 0 }
// ‚Üí M·∫£nh O (vu√¥ng), m√†u v√†ng, ·ªü gi·ªØa board, h√†ng tr√™n c√πng

// ‚ö° C·∫•u tr√∫c d·ªØ li·ªáu c·ªßa Energy Block (Kh·ªëi nƒÉng l∆∞·ª£ng)
// ======================================================
/**
 * ‚úÖ EnergyBlock - Kh·ªëi nƒÉng l∆∞·ª£ng nguy hi·ªÉm!
 * 
 * Kh·ªëi n√†y xu·∫•t hi·ªán ·ªü ƒë·ªô kh√≥ Hard v√† Impossible
 * N·∫øu ch·∫°m v√†o ho·∫∑c ƒë·ªÉ r∆°i xu·ªëng ƒë√°y = GAME OVER!
 * 
 * ·ªû Impossible mode:
 * - Chu·ªôt ƒë·∫øn g·∫ßn ‚Üí Kh·ªëi N·ªî!
 * - N·ªï xong ‚Üí Chu·ªôt b·ªã ƒê√ìNG BƒÇNG 3 gi√¢y!
 */
export interface EnergyBlock {
    x: number;              // V·ªã tr√≠ c·ªôt (0-9)
    y: number;              // V·ªã tr√≠ h√†ng (0-19)
    color: number;          // M√†u s·∫Øc (hex)
    dropSpeed: number;      // T·ªëc ƒë·ªô r∆°i (ms/√¥)
    lastDropTime: number;   // L·∫ßn r∆°i cu·ªëi (timestamp)
    canExplode: boolean;    // C√≥ th·ªÉ n·ªï kh√¥ng?
    explosionDistance?: number;  // Kho·∫£ng c√°ch n·ªï (pixels)
    freezeDuration?: number;     // Th·ªùi gian ƒë√≥ng bƒÉng (ms)
}
