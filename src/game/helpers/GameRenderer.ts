// src/game/helpers/GameRenderer.ts
// ======================================================
// ‚úÖ Game Renderer - Qu·∫£n l√Ω vi·ªác v·∫Ω game l√™n m√†n h√¨nh
// 
// Helper n√†y ch·ªãu tr√°ch nhi·ªám:
// - V·∫Ω board (khung v√† l∆∞·ªõi)
// - V·∫Ω m·∫£nh hi·ªán t·∫°i (current piece)
// - V·∫Ω m·∫£nh ti·∫øp theo (next piece preview)
// ======================================================

import { Scene } from 'phaser';
import { Piece, BOARD_WIDTH, BOARD_HEIGHT, BLOCK_SIZE, COLORS } from '../constants/GameConstants';

/**
 * ‚úÖ GameRenderer - Class qu·∫£n l√Ω vi·ªác render game
 * 
 * C√°ch ho·∫°t ƒë·ªông:
 * 1. Nh·∫≠n graphics objects t·ª´ scene
 * 2. Cung c·∫•p c√°c ph∆∞∆°ng th·ª©c v·∫Ω ri√™ng bi·ªát
 * 3. Clear v√† v·∫Ω l·∫°i m·ªói frame
 * 
 * ‚ùì C√¢u h·ªèi: T·∫°i sao t√°ch rendering ra?
 * üí° Tr·∫£ l·ªùi: ƒê·ªÉ code Game.ts g·ªçn h∆°n v√† d·ªÖ maintain!
 *            T·∫•t c·∫£ logic v·∫Ω t·∫≠p trung ·ªü 1 ch·ªó.
 */
export class GameRenderer {
    private scene: Scene;
    private boardGraphics: Phaser.GameObjects.Graphics;
    private pieceGraphics: Phaser.GameObjects.Graphics;
    private nextPieceGraphics: Phaser.GameObjects.Graphics;
    private boardX: number;
    private boardY: number;
    
    /**
     * ‚úÖ Constructor - Kh·ªüi t·∫°o GameRenderer
     * 
     * @param scene - Phaser Scene
     * @param boardX - V·ªã tr√≠ X c·ªßa board
     * @param boardY - V·ªã tr√≠ Y c·ªßa board
     */
    constructor(scene: Scene, boardX: number, boardY: number) {
        this.scene = scene;
        this.boardX = boardX;
        this.boardY = boardY;
        
        // T·∫°o graphics objects
        this.boardGraphics = scene.add.graphics();
        this.pieceGraphics = scene.add.graphics();
        this.nextPieceGraphics = scene.add.graphics();
    }
    
    /**
     * ‚úÖ render() - V·∫Ω to√†n b·ªô game
     * 
     * M·ª•c ti√™u: V·∫Ω board, current piece, v√† next piece
     * 
     * C√°ch ho·∫°t ƒë·ªông:
     * 1. Clear t·∫•t c·∫£ graphics c≈©
     * 2. V·∫Ω board (vi·ªÅn + l∆∞·ªõi + m·∫£nh ƒë√£ kh√≥a)
     * 3. V·∫Ω m·∫£nh hi·ªán t·∫°i
     * 4. V·∫Ω m·∫£nh ti·∫øp theo
     * 
     * Try it: H√†m n√†y ƒë∆∞·ª£c g·ªçi 60 l·∫ßn/gi√¢y trong update()
     */
    render(board: number[][], currentPiece: Piece | null, nextPiece: Piece | null) {
        // Clear graphics c≈©
        this.clear();
        
        // V·∫Ω theo th·ª© t·ª±: Board ‚Üí Current piece ‚Üí Next piece
        this.renderBoard(board);
        if (currentPiece) {
            this.renderCurrentPiece(currentPiece);
        }
        if (nextPiece) {
            this.renderNextPiece(nextPiece);
        }
    }
    
    /**
     * ‚úÖ clear() - X√≥a t·∫•t c·∫£ graphics
     * 
     * G·ªçi tr∆∞·ªõc khi v·∫Ω frame m·ªõi
     */
    clear() {
        this.boardGraphics.clear();
        this.pieceGraphics.clear();
        this.nextPieceGraphics.clear();
    }
    
    /**
     * ‚úÖ renderBoard() - V·∫Ω board game
     * 
     * M·ª•c ti√™u: V·∫Ω khung board, l∆∞·ªõi, v√† c√°c m·∫£nh ƒë√£ kh√≥a
     * 
     * C√°ch ho·∫°t ƒë·ªông:
     * 1. V·∫Ω vi·ªÅn board (border)
     * 2. V·∫Ω l∆∞·ªõi (grid)
     * 3. V·∫Ω c√°c √¥ ƒë√£ c√≥ m·∫£nh (board[y][x] !== 0)
     * 
     * ‚ùì C√¢u h·ªèi: T·∫°i sao v·∫Ω vi·ªÅn tr∆∞·ªõc?
     * üí° Tr·∫£ l·ªùi: ƒê·ªÉ vi·ªÅn ·ªü d∆∞·ªõi c√πng, kh√¥ng che l∆∞·ªõi v√† m·∫£nh!
     */
    renderBoard(board: number[][]) {
        // üî≤ V·∫Ω vi·ªÅn board (border)
        this.boardGraphics.lineStyle(4, 0x888888);
        this.boardGraphics.strokeRect(
            this.boardX - 2,
            this.boardY - 2,
            BOARD_WIDTH * BLOCK_SIZE + 4,
            BOARD_HEIGHT * BLOCK_SIZE + 4
        );
        
        // üìè V·∫Ω l∆∞·ªõi (grid)
        this.boardGraphics.lineStyle(1, 0x333333);
        for (let y = 0; y < BOARD_HEIGHT; y++) {
            for (let x = 0; x < BOARD_WIDTH; x++) {
                const px = this.boardX + x * BLOCK_SIZE;
                const py = this.boardY + y * BLOCK_SIZE;
                this.boardGraphics.strokeRect(px, py, BLOCK_SIZE, BLOCK_SIZE);
                
                // üé® V·∫Ω √¥ ƒë√£ c√≥ m·∫£nh
                if (board[y][x] !== 0) {
                    this.boardGraphics.fillStyle(COLORS[board[y][x]], 1);
                    this.boardGraphics.fillRect(px + 1, py + 1, BLOCK_SIZE - 2, BLOCK_SIZE - 2);
                }
            }
        }
    }
    
    /**
     * ‚úÖ renderCurrentPiece() - V·∫Ω m·∫£nh ƒëang r∆°i
     * 
     * M·ª•c ti√™u: V·∫Ω m·∫£nh hi·ªán t·∫°i v·ªõi m√†u s·∫Øc v√† hi·ªáu ·ª©ng
     * 
     * C√°ch ho·∫°t ƒë·ªông:
     * 1. Duy·ªát qua shape c·ªßa piece
     * 2. T√≠nh v·ªã tr√≠ pixel (x, y)
     * 3. V·∫Ω √¥ m√†u + vi·ªÅn s√°ng (highlight)
     * 
     * ‚ùì C√¢u h·ªèi: T·∫°i sao c√≥ vi·ªÅn s√°ng?
     * üí° Tr·∫£ l·ªùi: ƒê·ªÉ m·∫£nh n·ªïi b·∫≠t h∆°n, d·ªÖ nh√¨n!
     */
    renderCurrentPiece(piece: Piece) {
        for (let r = 0; r < piece.shape.length; r++) {
            for (let c = 0; c < piece.shape[r].length; c++) {
                if (piece.shape[r][c] !== 0) {
                    const px = this.boardX + (piece.x + c) * BLOCK_SIZE;
                    const py = this.boardY + (piece.y + r) * BLOCK_SIZE;
                    
                    // üé® V·∫Ω √¥ m√†u
                    this.pieceGraphics.fillStyle(COLORS[piece.color], 1);
                    this.pieceGraphics.fillRect(px + 1, py + 1, BLOCK_SIZE - 2, BLOCK_SIZE - 2);
                    
                    // ‚ú® V·∫Ω vi·ªÅn s√°ng (highlight)
                    this.pieceGraphics.lineStyle(2, 0xFFFFFF, 0.3);
                    this.pieceGraphics.strokeRect(px + 2, py + 2, BLOCK_SIZE - 4, BLOCK_SIZE - 4);
                }
            }
        }
    }
    
    /**
     * ‚úÖ renderNextPiece() - V·∫Ω m·∫£nh ti·∫øp theo (preview)
     * 
     * M·ª•c ti√™u: Hi·ªÉn th·ªã m·∫£nh s·∫Ω xu·∫•t hi·ªán sau m·∫£nh hi·ªán t·∫°i
     * 
     * C√°ch ho·∫°t ƒë·ªông:
     * 1. V·∫Ω ·ªü v·ªã tr√≠ c·ªë ƒë·ªãnh (b√™n ph·∫£i board)
     * 2. K√≠ch th∆∞·ªõc nh·ªè h∆°n (nextSize = 20px thay v√¨ 30px)
     * 3. Ch·ªâ v·∫Ω m√†u, kh√¥ng c√≥ vi·ªÅn
     * 
     * ‚ùì C√¢u h·ªèi: T·∫°i sao m·∫£nh nh·ªè h∆°n?
     * üí° Tr·∫£ l·ªùi: ƒê·ªÉ ph√¢n bi·ªát v·ªõi m·∫£nh ƒëang ch∆°i!
     *            Preview ch·ªâ ƒë·ªÉ xem tr∆∞·ªõc th√¥i.
     */
    renderNextPiece(piece: Piece) {
        const nextX = this.boardX + BOARD_WIDTH * BLOCK_SIZE + 50;
        const nextY = 400;
        const nextSize = 20; // Nh·ªè h∆°n BLOCK_SIZE
        
        for (let r = 0; r < piece.shape.length; r++) {
            for (let c = 0; c < piece.shape[r].length; c++) {
                if (piece.shape[r][c] !== 0) {
                    const px = nextX + c * nextSize;
                    const py = nextY + r * nextSize;
                    
                    this.nextPieceGraphics.fillStyle(COLORS[piece.color], 1);
                    this.nextPieceGraphics.fillRect(px, py, nextSize - 2, nextSize - 2);
                }
            }
        }
    }
    
    /**
     * ‚úÖ destroy() - D·ªçn d·∫πp khi scene k·∫øt th√∫c
     */
    destroy() {
        this.boardGraphics.destroy();
        this.pieceGraphics.destroy();
        this.nextPieceGraphics.destroy();
    }
}
