/**
 * TELEPORT SKILL - K·ªπ nƒÉng D·ªãch Chuy·ªÉn üåÄ
 * 
 * M√¥ t·∫£: Cho ph√©p ng∆∞·ªùi ch∆°i click v√†o b·∫•t k·ª≥ ƒë√¢u tr√™n b·∫£ng ƒë·ªÉ ƒë·∫∑t m·∫£nh gh√©p hi·ªán t·∫°i
 * 
 * C√°ch ho·∫°t ƒë·ªông:
 * 1. Khi ng∆∞·ªùi ch∆°i ch·ªçn skill Teleport, ch·∫ø ƒë·ªô d·ªãch chuy·ªÉn ƒë∆∞·ª£c k√≠ch ho·∫°t
 * 2. Ng∆∞·ªùi ch∆°i click v√†o v·ªã tr√≠ tr√™n b·∫£ng
 * 3. N·∫øu v·ªã tr√≠ ƒë√≥ h·ª£p l·ªá (kh√¥ng va ch·∫°m), m·∫£nh s·∫Ω ƒë∆∞·ª£c di chuy·ªÉn ƒë·∫øn ƒë√≥
 * 4. Skill s·∫Ω t·ª± ƒë·ªông t·∫Øt sau khi s·ª≠ d·ª•ng ho·∫∑c h·∫øt th·ªùi gian
 */

/**
 * Tr·∫°ng th√°i c·ªßa Teleport skill
 */
let teleportActive = false;
let teleportClickHandler = null;

/**
 * K√≠ch ho·∫°t ch·∫ø ƒë·ªô Teleport
 * 
 * @param {HTMLElement} boardElement - Ph·∫ßn t·ª≠ HTML c·ªßa b·∫£ng game
 * @param {Function} onTeleport - Callback ƒë∆∞·ª£c g·ªçi khi teleport th√†nh c√¥ng
 * @returns {Function} H√†m ƒë·ªÉ t·∫Øt teleport mode
 */
export function activateTeleportMode(boardElement, onTeleport) {
    teleportActive = true;
    
    // Th√™m class ƒë·ªÉ hi·ªÉn th·ªã giao di·ªán ƒë·∫∑c bi·ªát
    boardElement.classList.add('teleport-mode');
    
    // T·∫°o handler cho s·ª± ki·ªán click
    teleportClickHandler = (event) => {
        // T√≠nh to√°n v·ªã tr√≠ click tr√™n b·∫£ng
        const rect = boardElement.getBoundingClientRect();
        const clickX = event.clientX - rect.left;
        const clickY = event.clientY - rect.top;
        
        // Chuy·ªÉn ƒë·ªïi t·ª´ pixel sang t·ªça ƒë·ªô √¥ (cell)
        const blockWidth = rect.width / 10; // 10 l√† BOARD_WIDTH
        const blockHeight = rect.height / 20; // 20 l√† BOARD_HEIGHT (nh∆∞ng ch·ªâ hi·ªÉn th·ªã 18)
        
        const cellX = Math.floor(clickX / blockWidth);
        const cellY = Math.floor(clickY / blockHeight);
        
        // G·ªçi callback v·ªõi t·ªça ƒë·ªô ƒë√£ t√≠nh
        onTeleport(cellX, cellY);
    };
    
    // ƒêƒÉng k√Ω event listener
    boardElement.addEventListener('click', teleportClickHandler);
    
    // Tr·∫£ v·ªÅ h√†m ƒë·ªÉ t·∫Øt teleport mode
    return () => deactivateTeleportMode(boardElement);
}

/**
 * T·∫Øt ch·∫ø ƒë·ªô Teleport
 * 
 * @param {HTMLElement} boardElement - Ph·∫ßn t·ª≠ HTML c·ªßa b·∫£ng game
 */
export function deactivateTeleportMode(boardElement) {
    if (!teleportActive) return;
    
    teleportActive = false;
    boardElement.classList.remove('teleport-mode');
    
    // X√≥a event listener
    if (teleportClickHandler) {
        boardElement.removeEventListener('click', teleportClickHandler);
        teleportClickHandler = null;
    }
}

/**
 * Th·ª≠ d·ªãch chuy·ªÉn m·∫£nh ƒë·∫øn v·ªã tr√≠ m·ªõi
 * 
 * @param {Object} currentPiece - M·∫£nh gh√©p hi·ªán t·∫°i
 * @param {number} targetX - V·ªã tr√≠ X m·ª•c ti√™u
 * @param {number} targetY - V·ªã tr√≠ Y m·ª•c ti√™u
 * @param {Function} checkCollision - H√†m ki·ªÉm tra va ch·∫°m
 * @returns {Object|null} M·∫£nh m·ªõi n·∫øu th√†nh c√¥ng, null n·∫øu kh√¥ng h·ª£p l·ªá
 */
export function tryTeleport(currentPiece, targetX, targetY, checkCollision) {
    if (!currentPiece) return null;
    
    // T·∫°o m·∫£nh m·ªõi v·ªõi v·ªã tr√≠ m·ª•c ti√™u
    const newPiece = {
        ...currentPiece,
        x: targetX,
        y: targetY
    };
    
    // Ki·ªÉm tra va ch·∫°m
    if (checkCollision(newPiece)) {
        return null; // V·ªã tr√≠ kh√¥ng h·ª£p l·ªá
    }
    
    return newPiece; // V·ªã tr√≠ h·ª£p l·ªá, tr·∫£ v·ªÅ m·∫£nh m·ªõi
}

/**
 * Ki·ªÉm tra xem Teleport mode c√≥ ƒëang ho·∫°t ƒë·ªông kh√¥ng
 * 
 * @returns {boolean} true n·∫øu ƒëang ·ªü ch·∫ø ƒë·ªô teleport
 */
export function isTeleportActive() {
    return teleportActive;
}

/**
 * V·∫Ω c√°c √¥ h·ª£p l·ªá cho teleport (helper function)
 * 
 * @param {Array} board - B·∫£ng game
 * @param {Object} piece - M·∫£nh gh√©p hi·ªán t·∫°i
 * @param {Function} checkCollision - H√†m ki·ªÉm tra va ch·∫°m
 * @param {number} BOARD_WIDTH - Chi·ªÅu r·ªông b·∫£ng
 * @param {number} BOARD_HEIGHT - Chi·ªÅu cao b·∫£ng
 * @returns {Array} M·∫£ng c√°c v·ªã tr√≠ h·ª£p l·ªá [{x, y}]
 */
export function getValidTeleportPositions(board, piece, checkCollision, BOARD_WIDTH, BOARD_HEIGHT) {
    const validPositions = [];
    
    // Duy·ªát qua t·∫•t c·∫£ c√°c v·ªã tr√≠ c√≥ th·ªÉ
    for (let y = 0; y < BOARD_HEIGHT; y++) {
        for (let x = 0; x < BOARD_WIDTH; x++) {
            const testPiece = { ...piece, x, y };
            
            // Ki·ªÉm tra xem v·ªã tr√≠ n√†y c√≥ h·ª£p l·ªá kh√¥ng
            if (!checkCollision(testPiece)) {
                validPositions.push({ x, y });
            }
        }
    }
    
    return validPositions;
}
