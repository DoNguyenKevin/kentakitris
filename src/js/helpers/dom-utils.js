// js/helpers/dom-utils.js
// ======================================================
// H√†m gi√∫p l√†m vi·ªác v·ªõi DOM (Document Object Model)
// DOM = c√°ch JavaScript ƒëi·ªÅu khi·ªÉn trang web
// ======================================================

// ‚úÖ M·ª•c ti√™u: Hi·ªÉn th·ªã m·ªôt ph·∫ßn t·ª≠ (element)
// V√≠ d·ª•: showElement('game-over-modal')
// Try it: showElement('score-display');
export function showElement(elementId) {
    const element = document.getElementById(elementId);
    if (element) {
        // X√≥a class 'hidden' ƒë·ªÉ hi·ªán ra
        element.classList.remove('hidden');
        return true;
    } else {
        console.error(`Kh√¥ng t√¨m th·∫•y element v·ªõi id: ${elementId}`);
        return false;
    }
}

// ‚úÖ M·ª•c ti√™u: ·∫®n m·ªôt ph·∫ßn t·ª≠
// V√≠ d·ª•: hideElement('loading-spinner')
// Try it: hideElement('pause-screen');
export function hideElement(elementId) {
    const element = document.getElementById(elementId);
    if (element) {
        // Th√™m class 'hidden' ƒë·ªÉ ·∫©n ƒëi
        element.classList.add('hidden');
        return true;
    } else {
        console.error(`Kh√¥ng t√¨m th·∫•y element v·ªõi id: ${elementId}`);
        return false;
    }
}

// ‚úÖ M·ª•c ti√™u: B·∫≠t/t·∫Øt hi·ªÉn th·ªã c·ªßa element
// N·∫øu ƒëang hi·ªán ‚Üí ·∫©n ƒëi, n·∫øu ƒëang ·∫©n ‚Üí hi·ªán ra
// V√≠ d·ª•: toggleElement('settings-menu')
export function toggleElement(elementId) {
    const element = document.getElementById(elementId);
    if (element) {
        element.classList.toggle('hidden');
        return true;
    } else {
        console.error(`Kh√¥ng t√¨m th·∫•y element v·ªõi id: ${elementId}`);
        return false;
    }
}

// ‚úÖ M·ª•c ti√™u: C·∫≠p nh·∫≠t n·ªôi dung text c·ªßa element
// V√≠ d·ª•: updateText('score-value', '1000')
// Try it: updateText('level-display', 'Level 5');
export function updateText(elementId, text) {
    const element = document.getElementById(elementId);
    if (element) {
        element.textContent = text;
        return true;
    } else {
        console.error(`Kh√¥ng t√¨m th·∫•y element v·ªõi id: ${elementId}`);
        return false;
    }
}

// ‚úÖ M·ª•c ti√™u: T·∫°o m·ªôt element HTML m·ªõi
// V√≠ d·ª•: createElement('div', 'my-class', 'Hello!')
// Try it:
// const box = createElement('div', 'red-box', 'Xin ch√†o');
// document.body.appendChild(box);
export function createElement(tagName, className = '', textContent = '') {
    const element = document.createElement(tagName);
    if (className) {
        element.className = className;
    }
    if (textContent) {
        element.textContent = textContent;
    }
    return element;
}

// ‚úÖ M·ª•c ti√™u: Th√™m class v√†o element
// Class trong HTML/CSS gi√∫p trang tr√≠ element
// V√≠ d·ª•: addClass('player-name', 'highlight')
export function addClass(elementId, className) {
    const element = document.getElementById(elementId);
    if (element) {
        element.classList.add(className);
        return true;
    }
    return false;
}

// ‚úÖ M·ª•c ti√™u: X√≥a class kh·ªèi element
// V√≠ d·ª•: removeClass('game-board', 'paused')
export function removeClass(elementId, className) {
    const element = document.getElementById(elementId);
    if (element) {
        element.classList.remove(className);
        return true;
    }
    return false;
}

// ‚ùì C√¢u h·ªèi: Element l√† g√¨?
// üí° Tr·∫£ l·ªùi: Element = th√†nh ph·∫ßn tr√™n trang web
//            V√≠ d·ª•: n√∫t b·∫•m, h·ªôp ch·ªØ, h√¨nh ·∫£nh...

// ‚ùì C√¢u h·ªèi: Class l√† g√¨?
// üí° Tr·∫£ l·ªùi: Class = nh√£n ƒë·ªÉ trang tr√≠ element
//            CSS d√πng class ƒë·ªÉ ƒë·ªïi m√†u, k√≠ch th∆∞·ªõc, v·ªã tr√≠...
//            M·ªôt element c√≥ th·ªÉ c√≥ nhi·ªÅu class!

// ‚ùì Th·ª≠ nghi·ªám: H√£y th·ª≠ thay ƒë·ªïi text c·ªßa ƒëi·ªÉm s·ªë
// Try it:
// updateText('score', '999999');
// addClass('score', 'blink'); // N·∫øu c√≥ CSS cho class 'blink'
